[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 3840
PlayResY: 2160

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: 原片.mp4
Video File: 原片.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.200000
Scroll Position: 21
Active Line: 30
Video Position: 3530

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: 底部中文,Source Han Sans CN,120,&H00FFFFFF,&H000000FF,&H00FF5200,&H00000000,-1,0,0,0,100,100,0,0,1,3,1.6,2,10,10,10,1
Style: 底部英文,Comic Sans MS,86,&H00FFFFFF,&H000000FF,&H00FF459A,&H00000000,-1,0,0,0,100,100,0,0,1,1.2,2.4,2,10,10,10,1
Style: 顶部注释,Source Han Sans CN,80,&H00FFFFFF,&H000000FF,&H00C500FF,&H00000000,0,0,0,0,100,100,0,0,1,0.8,0.8,8,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.24,0:00:02.03,底部英文,,0,0,0,,Here's a fun thing you can try.
Dialogue: 0,0:00:00.24,0:00:02.03,底部中文,,0,0,0,,让我们来做一个有趣的实验
Dialogue: 0,0:00:02.03,0:00:03.48,底部英文,,0,0,0,,Get out your old NES,
Dialogue: 0,0:00:02.03,0:00:03.48,底部中文,,0,0,0,,拿出你的古董美版红白机
Dialogue: 0,0:00:03.58,0:00:05.68,底部英文,,0,0,0,,pop in Super Mario Bros. and turn it on.
Dialogue: 0,0:00:03.58,0:00:05.68,底部中文,,0,0,0,,插入《超级马里奥兄弟》的卡带 按下电源开关
Dialogue: 0,0:00:06.48,0:00:10.88,底部英文,,0,0,0,,Then pop out the cartridge without turning off the console, then pop in Tennis.
Dialogue: 0,0:00:06.48,0:00:10.88,底部中文,,0,0,0,,然后在不关闭主机电源的情况下 弹出卡带并插入游戏《网球》的卡带
Dialogue: 0,0:00:11.60,0:00:16.96,底部英文,,0,0,0,,Use the reset button to start the game, start a new match, and play for a few seconds.
Dialogue: 0,0:00:11.60,0:00:16.96,底部中文,,0,0,0,,按一下复位按钮来启动游戏 开始新的回合并游玩几秒钟
Dialogue: 0,0:00:16.96,0:00:20.96,底部英文,,0,0,0,,Make sure the music has stopped playing and you move your player around a bit afterwards.
Dialogue: 0,0:00:16.96,0:00:20.96,底部中文,,0,0,0,,确保在音乐停止后 将己方玩家稍作移动
Dialogue: 0,0:00:28.64,0:00:31.74,底部英文,,0,0,0,,Then pop out this cartridge without turning off the console,
Dialogue: 0,0:00:28.64,0:00:31.74,底部中文,,0,0,0,,此时 再次在不关闭主机电源的条件下 将卡带取出
Dialogue: 0,0:00:31.74,0:00:35.86,底部英文,,0,0,0,,and put Super Mario Bros. back in, using the reset button again to boot it up.
Dialogue: 0,0:00:31.74,0:00:35.86,底部中文,,0,0,0,,将《超级马力奥兄弟》的卡带插回去 按下复位按钮引导游戏启动
Dialogue: 0,0:00:36.08,0:00:38.24,底部英文,,0,0,0,,Then, hold A and press start.
Dialogue: 0,0:00:36.08,0:00:38.24,底部中文,,0,0,0,,在按住A键不放开的同时 按一下开始键
Dialogue: 0,0:00:40.00,0:00:42.50,底部英文,,0,0,0,,World 9-1! What?
Dialogue: 0,0:00:40.00,0:00:42.50,底部中文,,0,0,0,,进入了9号世界的第1关！神马情况？
Dialogue: 0,0:00:46.96,0:00:48.82,底部英文,,0,0,0,,So there's a lot to take in at once here, 
Dialogue: 0,0:00:46.96,0:00:48.82,底部中文,,0,0,0,,究其原因 可能稍微有些复杂
Dialogue: 0,0:00:48.82,0:00:50.64,底部英文,,0,0,0,,so let's take it one step at a time.
Dialogue: 0,0:00:48.82,0:00:50.64,底部中文,,0,0,0,,且听我徐徐道来
Dialogue: 0,0:00:51.52,0:00:56.00,底部英文,,0,0,0,,Holding A while pressing start at the title screen is a real feature of the game.
Dialogue: 0,0:00:51.52,0:00:54.30,底部中文,,0,0,0,,在标题界面 按住A键的同时按下开始键
Dialogue: 0,0:00:54.38,0:00:56.00,底部中文,,0,0,0,,是超级马里奥兄弟本身就有的功能
Dialogue: 0,0:00:56.00,0:01:01.92,底部英文,,0,0,0,,It's intended mechanic is to let you restart at the start of the world you were in if you had a game over.
Dialogue: 0,0:00:56.00,0:00:58.76,底部中文,,0,0,0,,这项功能原本的意图是允许玩家
Dialogue: 0,0:00:58.82,0:01:01.92,底部中文,,0,0,0,,从闯关失败的世界起点重新开始游戏（以下称该功能为“续关”）
Dialogue: 0,0:00:58.82,0:01:01.92,顶部注释,,0,0,0,,注：该游戏的一个关卡表示为“WORLD A-B”，其中A为世界编号，B为某个世界的关卡编号；正常情况下，有8个世界，每个世界4关，共32关\N由于续关世界编号在内存中占一个字节，能表示256个不同的值，造成了所谓的“水下256关”（Glitch Worlds，异常世界）
Dialogue: 0,0:01:02.51,0:01:05.68,底部英文,,0,0,0,,For example, if you got a game over in level 6-3,  
Dialogue: 0,0:01:02.51,0:01:05.68,底部中文,,0,0,0,,举个栗子 如果你在关卡6-3挂掉了
Dialogue: 0,0:01:05.68,0:01:08.72,底部英文,,0,0,0,,if you hold A while pressing start at the title screen,  
Dialogue: 0,0:01:05.68,0:01:08.72,底部中文,,0,0,0,,如果在标题界面下 按住A的同时按一下开始键
Dialogue: 0,0:01:08.72,0:01:12.32,底部英文,,0,0,0,,you would start at level 6-1 instead of 1-1.
Dialogue: 0,0:01:08.72,0:01:12.32,底部中文,,0,0,0,,就会从刚才的关卡6-1继续游戏 而非第一个关卡1-1
Dialogue: 0,0:01:12.94,0:01:17.18,底部英文,,0,0,0,,This means that somehow, the game Tennis is corrupting this value,
Dialogue: 0,0:01:12.94,0:01:17.18,底部中文,,0,0,0,,也就是说 《网球》这款游戏因为某种原因破坏掉了这个值
Dialogue: 0,0:01:17.28,0:01:19.52,底部英文,,0,0,0,,which lets you start at some random world instead.
Dialogue: 0,0:01:17.28,0:01:19.52,底部中文,,0,0,0,,使得我们可以从随机的世界开始游戏
Dialogue: 0,0:01:20.40,0:01:24.16,底部英文,,0,0,0,,This value doesn't even have to correspond to the 8 worlds in the game,  
Dialogue: 0,0:01:20.40,0:01:24.16,底部中文,,0,0,0,,这个值甚至可以不对应正常的8个世界
Dialogue: 0,0:01:24.16,0:01:27.82,底部英文,,0,0,0,,which means you can get to world 9, worlds A through Z,
Dialogue: 0,0:01:24.16,0:01:27.82,底部中文,,0,0,0,,可以进入9号世界 世界编号也可以是A到Z
Dialogue: 0,0:01:27.96,0:01:32.44,底部英文,,0,0,0,,and a bunch level numbers that use glitched tiles instead of numbers or letters.
Dialogue: 0,0:01:27.96,0:01:32.44,底部中文,,0,0,0,,乃至一系列使用异常图块 而非字母或数字表示的世界编号
Dialogue: 0,0:01:33.14,0:01:37.32,底部英文,,0,0,0,,The way this corruption works and how it is allowed to happen is very interesting,
Dialogue: 0,0:01:33.14,0:01:37.32,底部中文,,0,0,0,,破坏的机制以及它成立的条件非常有意思
Dialogue: 0,0:01:37.38,0:01:39.84,底部英文,,0,0,0,,so we'll take a deep look into exactly what's going on.
Dialogue: 0,0:01:37.38,0:01:39.84,底部中文,,0,0,0,,接下来我们将深入探寻究竟发生了什么
Dialogue: 0,0:01:40.48,0:01:45.84,底部英文,,0,0,0,,And the fact that Tennis is pretty much the only game that allows this is a very big coincidence,  
Dialogue: 0,0:01:40.48,0:01:45.84,底部中文,,0,0,0,,不得不提的是 《网球》是唯一能达成此目的的游戏 这本身是个巨大的巧合
Dialogue: 0,0:01:45.84,0:01:49.20,底部英文,,0,0,0,,as we'll soon see the quite bizarre requirements to get this to work. 
Dialogue: 0,0:01:45.84,0:01:49.20,底部中文,,0,0,0,,接下来 我们就会了解达成的条件是多么荒诞
Dialogue: 0,0:01:50.72,0:01:56.48,底部英文,,0,0,0,,The biggest question that really comes up is how is one game able to even affect the other at all?
Dialogue: 0,0:01:50.72,0:01:56.48,底部中文,,0,0,0,,最大的疑问在于 一款游戏是如何影响另一款游戏的？
Dialogue: 0,0:01:56.90,0:01:59.52,底部英文,,0,0,0,,How can data be written to memory by one game,  
Dialogue: 0,0:01:56.90,0:01:59.52,底部中文,,0,0,0,,由某个游戏写入的数据
Dialogue: 0,0:01:59.84,0:02:02.38,底部英文,,0,0,0,,stay there when no game is in the console,
Dialogue: 0,0:01:59.84,0:02:02.38,底部中文,,0,0,0,,居然能够在没有游戏插入主机的时候被保留
Dialogue: 0,0:02:02.48,0:02:04.00,底部英文,,0,0,0,,and then be read by the second game? 
Dialogue: 0,0:02:02.48,0:02:04.00,底部中文,,0,0,0,,并被接下来插入的游戏读取到
Dialogue: 0,0:02:04.96,0:02:09.52,底部英文,,0,0,0,,Well, this why it helps to eject the games out of the console without turning it off first. 
Dialogue: 0,0:02:04.96,0:02:09.52,底部中文,,0,0,0,,这正是为什么要在不关闭主机电源的情况下弹出游戏的原因
Dialogue: 0,0:02:10.32,0:02:14.24,底部英文,,0,0,0,,When data is written to memory, it is stored in some sort of RAM chip. 
Dialogue: 0,0:02:10.32,0:02:14.24,底部中文,,0,0,0,,当数据被写入内存后 它被存储在某种随机访问存储器（RAM）芯片中
Dialogue: 0,0:02:14.96,0:02:19.52,底部英文,,0,0,0,,That RAM chip needs to be receiving power from the console in order to function properly. 
Dialogue: 0,0:02:14.96,0:02:19.52,底部中文,,0,0,0,,掉电易失的RAM芯片需要主机持续的供电来保证自身正常工作
Dialogue: 0,0:02:20.32,0:02:24.72,底部英文,,0,0,0,,The moment that the RAM chip loses power, the data it holds starts to decay. 
Dialogue: 0,0:02:20.32,0:02:24.72,底部中文,,0,0,0,,在RAM芯片失去电源以后 内部存放的数据就开始逐渐“衰退”
Dialogue: 0,0:02:25.60,0:02:30.48,底部英文,,0,0,0,,And by decay, I mean that it slowly starts to convert into some 'default'  
Dialogue: 0,0:02:25.60,0:02:31.18,底部中文,,0,0,0,,在“衰退”的过程中 有意义的数据慢慢地转变为某种初始值
Dialogue: 0,0:02:31.32,0:02:33.81,底部英文,,0,0,0,,that corresponds to the chip's resting state,
Dialogue: 0,0:02:31.32,0:02:33.81,底部中文,,0,0,0,,这种值对应芯片的掉电闲置状态
Dialogue: 0,0:02:33.81,0:02:37.84,底部英文,,0,0,0,,which can be different per chip and even per memory cell on the same chip.
Dialogue: 0,0:02:33.81,0:02:37.84,底部中文,,0,0,0,,每个不同的芯片 甚至一个芯片的不同记忆单元 都有可能不一样
Dialogue: 0,0:02:38.74,0:02:40.96,底部英文,,0,0,0,,However, this process happens slowly. 
Dialogue: 0,0:02:38.74,0:02:41.32,底部中文,,0,0,0,,然而 这个过程是逐渐发生的
Dialogue: 0,0:02:41.60,0:02:44.84,底部英文,,0,0,0,,So if power is lost only for a small amount of time,
Dialogue: 0,0:02:41.60,0:02:44.84,底部中文,,0,0,0,,所以 如果只是短暂地失去电源
Dialogue: 0,0:02:44.84,0:02:48.68,底部英文,,0,0,0,,the chances that any data value becomes lost diminishes.
Dialogue: 0,0:02:44.84,0:02:48.68,底部中文,,0,0,0,,有数据丢失的可能性微乎其微
Dialogue: 0,0:02:49.28,0:02:53.10,底部英文,,0,0,0,,If you are fast enough at pulling out cartridges and putting them back in, 
Dialogue: 0,0:02:49.28,0:02:53.10,底部中文,,0,0,0,,也就是说 如果取出和放回游戏卡带的速度足够快 
Dialogue: 0,0:02:53.10,0:02:57.09,底部英文,,0,0,0,,it's possible you can properly turn off the console in between each swap.
Dialogue: 0,0:02:53.10,0:02:57.09,底部中文,,0,0,0,,就算在交换游戏期间恰当的关闭游戏机电源 那也是无所谓的
Dialogue: 0,0:02:57.09,0:02:59.36,底部英文,,0,0,0,,It's just easier to leave the system on. 
Dialogue: 0,0:02:57.09,0:02:59.36,底部中文,,0,0,0,,只是让系统保持在开机状态 使得数据的保持更加容易罢了
Dialogue: 0,0:03:00.56,0:03:03.26,底部英文,,0,0,0,,Even with an original NES with a CIC
Dialogue: 0,0:03:00.56,0:03:03.26,底部中文,,0,0,0,,哪怕使用一台带有CIC芯片的正版NES游戏机
Dialogue: 0,0:03:00.56,0:03:03.26,顶部注释,,0,0,0,,注：CIC即"Checking Integrated Circuit"，任天堂为美版红白机（NES）添加的防盗版芯片
Dialogue: 0,0:03:03.32,0:03:06.90,底部英文,,0,0,0,,that will flip the power on and off continuously when there is no game inserted,
Dialogue: 0,0:03:03.32,0:03:06.90,底部中文,,0,0,0,,它会在没有游戏插入时反复地开启和关闭游戏机电源
Dialogue: 0,0:03:06.90,0:03:10.32,底部英文,,0,0,0,,it keeps the power running long enough that this is possible. 
Dialogue: 0,0:03:06.90,0:03:10.60,底部中文,,0,0,0,,但也可以确保主机有足够长的通电时间 数据不会丢失
Dialogue: 0,0:03:11.36,0:03:17.12,底部英文,,0,0,0,,Of course, any time the system doesn't have power is a small chance for memory to decay anyway,  
Dialogue: 0,0:03:11.36,0:03:17.12,底部中文,,0,0,0,,当然了 一旦系统掉电 内存中的数据都有小概率会“衰退”
Dialogue: 0,0:03:17.28,0:03:18.88,底部英文,,0,0,0,,so there's always a chance it won't work.
Dialogue: 0,0:03:17.28,0:03:18.88,底部中文,,0,0,0,,所以这个方法失效的可能性还是存在的
Dialogue: 0,0:03:20.80,0:03:26.40,底部英文,,0,0,0,,So, Tennis uses the same memory location that corresponds to the world number in Super Mario Bros. 
Dialogue: 0,0:03:20.80,0:03:26.40,底部中文,,0,0,0,,那么《网球》使用到了《超级马里奥兄弟》中存放世界编号的内存位置
Dialogue: 0,0:03:26.96,0:03:30.40,底部英文,,0,0,0,,It changes it from world 6 or whatever, to something like world 9. 
Dialogue: 0,0:03:26.96,0:03:30.40,底部中文,,0,0,0,,将它从如6号世界 修改到了9号世界 
Dialogue: 0,0:03:31.04,0:03:33.60,底部英文,,0,0,0,,How does this not happen way more often?
Dialogue: 0,0:03:31.04,0:03:33.60,底部中文,,0,0,0,,这种事情为什么不会更频繁地发生呢？
Dialogue: 0,0:03:33.60,0:03:37.46,底部英文,,0,0,0,,Does no other game use this particular memory location at all?
Dialogue: 0,0:03:33.60,0:03:37.46,底部中文,,0,0,0,,是因为别的游戏都完全不会用到这个特殊的内存位置吗？
Dialogue: 0,0:03:37.46,0:03:40.92,底部英文,,0,0,0,,In other words, how does Super Mario Bros. know
Dialogue: 0,0:03:41.02,0:03:44.70,底部英文,,0,0,0,,not let you start at a random world number the first time you turn it on? 
Dialogue: 0,0:03:37.46,0:03:40.92,底部中文,,0,0,0,,换个角度思考《超级马里奥兄弟》是如何保证
Dialogue: 0,0:03:41.02,0:03:44.70,底部中文,,0,0,0,,在你第一次打开游戏机时 不会从一个随机世界开始游戏的呢？
Dialogue: 0,0:03:45.36,0:03:50.00,底部英文,,0,0,0,,Here's a hint: this is why you need to boot up Mario first before playing Tennis. 
Dialogue: 0,0:03:45.36,0:03:50.00,底部中文,,0,0,0,,给大家一点提示：这是在游玩《网球》的步骤前 必须先引导《马里奥》的原因
Dialogue: 0,0:03:50.72,0:03:54.64,底部英文,,0,0,0,,Super Mario Bros. actually checks for a warm start when it turns on. 
Dialogue: 0,0:03:50.72,0:03:54.64,底部中文,,0,0,0,,《超级马里奥兄弟》在开始运行时 会做热启动检查
Dialogue: 0,0:03:55.52,0:04:01.12,底部英文,,0,0,0,,A warm start is when the game starts up just after a reset--sometimes called a soft reset. 
Dialogue: 0,0:03:55.52,0:04:01.12,底部中文,,0,0,0,,热启动指游戏在按下复位按钮后开始运行 这种复位被称为软复位
Dialogue: 0,0:04:01.84,0:04:06.40,底部英文,,0,0,0,,This is opposed to a cold start, when the game is first inserted into the console,  
Dialogue: 0,0:04:01.84,0:04:06.40,底部中文,,0,0,0,,与之相对的是冷启动 即一个游戏被首次插入到游戏机中  
Dialogue: 0,0:04:06.40,0:04:10.32,底部英文,,0,0,0,,or if you press the power button off and on again--called a hard reset. 
Dialogue: 0,0:04:06.40,0:04:10.32,底部中文,,0,0,0,,或将电源开关关闭后再打开 这种复位被称为硬复位
Dialogue: 0,0:04:11.36,0:04:15.92,底部英文,,0,0,0,,If the game detects a cold start, all of memory is wiped fresh. 
Dialogue: 0,0:04:11.36,0:04:15.92,底部中文,,0,0,0,,当游戏检测到冷启动发生 就会将所有内存清空
Dialogue: 0,0:04:15.92,0:04:20.23,底部英文,,0,0,0,,This would mean that anything that was written to memory by a previous game is overwritten with zeros. 
Dialogue: 0,0:04:15.92,0:04:20.23,底部中文,,0,0,0,,意味着被上一个游戏写入内存的所有数据都会被0覆盖
Dialogue: 0,0:04:21.51,0:04:26.40,底部英文,,0,0,0,,This includes the starting world number--it gets set to zero which corresponds to world 1. 
Dialogue: 0,0:04:21.51,0:04:26.40,底部中文,,0,0,0,,同时也包括续关的世界编号 被设置为0 代表从第1个世界开始游戏
Dialogue: 0,0:04:27.44,0:04:31.52,底部英文,,0,0,0,,If the game detects a warm start however, not all of memory is wiped. 
Dialogue: 0,0:04:27.44,0:04:31.52,底部中文,,0,0,0,,然而 如果游戏检测到热启动 就会对内存进行局部清空
Dialogue: 0,0:04:32.08,0:04:35.82,底部英文,,0,0,0,,There is a small section of 41 bytes that aren't wiped out.
Dialogue: 0,0:04:32.08,0:04:35.82,底部中文,,0,0,0,,这一个长度为41字节的内存块不会被清理掉
Dialogue: 0,0:04:35.92,0:04:39.80,底部英文,,0,0,0,,They retain whatever memory values existed before the soft reset.
Dialogue: 0,0:04:35.92,0:04:39.80,底部中文,,0,0,0,,它仍然保持着软复位之前的值
Dialogue: 0,0:04:40.14,0:04:43.08,底部英文,,0,0,0,,Which, you guessed it, contains that starting world number.
Dialogue: 0,0:04:40.14,0:04:43.08,底部中文,,0,0,0,,正如你所想 在这里面存放着续关世界编号
Dialogue: 0,0:04:43.08,0:04:47.02,底部英文,,0,0,0,,That doesn't explain why this doesn't happen all the time though.
Dialogue: 0,0:04:43.08,0:04:47.02,底部中文,,0,0,0,,但是这仍然无法解释现象中的偶然性
Dialogue: 0,0:04:47.48,0:04:52.80,底部英文,,0,0,0,,We have to look at how the game determines if it is booting up from a cold start or warm start situation. 
Dialogue: 0,0:04:47.48,0:04:52.80,底部中文,,0,0,0,,我们需要了解游戏如何判断自身是被冷启动还是热启动的
Dialogue: 0,0:04:54.72,0:04:58.00,底部英文,,0,0,0,,First lets take a look at those 41 bytes and what they are used for. 
Dialogue: 0,0:04:54.72,0:04:58.00,底部中文,,0,0,0,,我们从研究这41字节数据的用途开始
Dialogue: 0,0:04:58.72,0:05:01.76,底部英文,,0,0,0,,Most of them are used for the digits displayed on the status bar. 
Dialogue: 0,0:04:58.72,0:05:01.76,底部中文,,0,0,0,,其中大部分数据都是用来保存显示在状态栏上的数字
Dialogue: 0,0:04:58.72,0:05:01.76,顶部注释,,0,0,0,,注：以下均为8位数据，但BCD码格式，仅0-9有效
Dialogue: 0,0:05:02.56,0:05:08.40,底部英文,,0,0,0,,The first 6 bytes correspond to the 6 digits of the top score displayed on the title screen. 
Dialogue: 0,0:05:02.56,0:05:08.40,底部中文,,0,0,0,,前6个字节对应标题画面中最高分的6位数字
Dialogue: 0,0:05:08.96,0:05:13.12,底部英文,,0,0,0,,The score can actually be 7 digits, but the last digit is always a 0,  
Dialogue: 0,0:05:08.96,0:05:13.12,底部中文,,0,0,0,,实际上最高分可以有7位数 但最后一位始终为0 
Dialogue: 0,0:05:13.12,0:05:14.56,底部英文,,0,0,0,,so it doesn't need to be kept track of. 
Dialogue: 0,0:05:13.12,0:05:14.56,底部中文,,0,0,0,,所以这一位数不需要被记录
Dialogue: 0,0:05:15.76,0:05:19.76,底部英文,,0,0,0,,The next set of 6 bytes are the 6 digits of Mario's current score. 
Dialogue: 0,0:05:15.76,0:05:19.76,底部中文,,0,0,0,,随后由6个字节构成的一组数据是马里奥当前的得分
Dialogue: 0,0:05:20.40,0:05:23.02,底部英文,,0,0,0,,The next set of 6 are Luigi's current score.
Dialogue: 0,0:05:20.40,0:05:23.02,底部中文,,0,0,0,,接下来6个字节是路易吉的当前得分
Dialogue: 0,0:05:23.44,0:05:25.92,底部英文,,0,0,0,,The next set of 6 are Mario's coin count. 
Dialogue: 0,0:05:23.44,0:05:25.92,底部中文,,0,0,0,,紧接着6字节数据表示马里奥的硬币计数
Dialogue: 0,0:05:26.32,0:05:30.76,底部英文,,0,0,0,,While only the last two digits are displayed, the other 4 are there, just hidden. 
Dialogue: 0,0:05:26.32,0:05:30.76,底部中文,,0,0,0,,但只有最后两位数字被显示在屏幕上 剩下的4位被隐藏
Dialogue: 0,0:05:31.20,0:05:34.16,底部英文,,0,0,0,,Same for the next 6 bytes, which are Luigi's coin count. 
Dialogue: 0,0:05:31.20,0:05:34.16,底部中文,,0,0,0,,同理 后面的6个字节是路易吉吃到的硬币计数
Dialogue: 0,0:05:35.92,0:05:39.44,底部英文,,0,0,0,,The next set of 6 bytes are the number of seconds left on the timer,  
Dialogue: 0,0:05:35.92,0:05:39.44,底部中文,,0,0,0,,此后的6个字节表示计时器剩余的秒数  
Dialogue: 0,0:05:39.44,0:05:41.38,底部英文,,0,0,0,,of which only the last 3 are shown.
Dialogue: 0,0:05:39.44,0:05:41.38,底部中文,,0,0,0,,但只有最后三位被显示在屏幕上
Dialogue: 0,0:05:41.99,0:05:43.60,底部英文,,0,0,0,,This leaves 5 bytes. 
Dialogue: 0,0:05:41.99,0:05:43.60,底部中文,,0,0,0,,到这里 还剩下5个字节
Dialogue: 0,0:05:44.64,0:05:46.78,底部英文,,0,0,0,,These two bytes are actually unused.
Dialogue: 0,0:05:44.64,0:05:46.78,底部中文,,0,0,0,,实际上这两个字节没有被使用到
Dialogue: 0,0:05:47.30,0:05:50.76,底部英文,,0,0,0,,This byte is used as a flag to determine
Dialogue: 0,0:05:47.30,0:05:50.76,底部中文,,0,0,0,,这个字节被用来决定
Dialogue: 0,0:05:50.78,0:05:54.72,底部英文,,0,0,0,,whether or not you can use the B button to cycle through the worlds on the title screen. 
Dialogue: 0,0:05:50.78,0:05:54.72,底部中文,,0,0,0,,玩家能否在标题画面使用B键来循环地选择某个世界并进入（“选关”）
Dialogue: 0,0:05:55.44,0:05:58.56,底部英文,,0,0,0,,This is a normal functionality that is enabled after beating the game. 
Dialogue: 0,0:05:55.44,0:05:58.56,底部中文,,0,0,0,,这是在游戏通关后具有的正常功能
Dialogue: 0,0:05:59.76,0:06:02.22,底部英文,,0,0,0,,The next byte is the starting world number byte.
Dialogue: 0,0:05:59.76,0:06:02.22,底部中文,,0,0,0,,后面的这个字节是续关的世界编号
Dialogue: 0,0:06:02.22,0:06:07.12,底部英文,,0,0,0,,This is what world you start on if you hold A while pressing start on the title screen, minus 1. 
Dialogue: 0,0:06:02.22,0:06:07.12,底部中文,,0,0,0,,在标题画面下按住A并按下开始键进入的那个世界 将其世界编号减1 就是这里的值
Dialogue: 0,0:06:08.32,0:06:11.00,底部英文,,0,0,0,,This last byte though is the special byte.
Dialogue: 0,0:06:08.32,0:06:11.00,底部中文,,0,0,0,,最后一个字节是特殊字节
Dialogue: 0,0:06:11.00,0:06:18.64,底部英文,,0,0,0,,When the game starts up, it writes the special value of $A5 here and it stays like that as long as the game is on. 
Dialogue: 0,0:06:11.00,0:06:18.64,底部中文,,0,0,0,,当游戏启动时 这里被写入一个魔数0xA5 并在游戏过程中保持不变
Dialogue: 0,0:06:19.44,0:06:23.76,底部英文,,0,0,0,,Before it does that though, it checks if the value is already $A5. 
Dialogue: 0,0:06:19.44,0:06:23.76,底部中文,,0,0,0,,在写入这个位置之前 游戏会检查其值是否已经是0xA5
Dialogue: 0,0:06:24.40,0:06:29.36,底部英文,,0,0,0,,If it was already $A5, then it's likely that the game was just previously running  
Dialogue: 0,0:06:24.40,0:06:29.36,底部中文,,0,0,0,,如果已经是0xA5 有可能游戏刚刚运行过
Dialogue: 0,0:06:29.36,0:06:31.20,底部英文,,0,0,0,,and only the reset button was pressed. 
Dialogue: 0,0:06:29.36,0:06:31.20,底部中文,,0,0,0,,只是复位按钮被按下
Dialogue: 0,0:06:32.08,0:06:36.88,底部英文,,0,0,0,,If it wasn't $A5, then it knows to treat this like a cold start and wipe all of the memory. 
Dialogue: 0,0:06:32.08,0:06:36.88,底部中文,,0,0,0,,如果不是0xA5 游戏将自身的启动当作冷启动 并在初始化中抹去所有内存
Dialogue: 0,0:06:38.80,0:06:42.38,底部英文,,0,0,0,,Now, just checking one byte isn't that great of a scheme,
Dialogue: 0,0:06:38.80,0:06:42.38,底部中文,,0,0,0,,然而 只检查一个字节并不是一个好办法
Dialogue: 0,0:06:42.56,0:06:48.96,底部英文,,0,0,0,,because there's a good chance that some other game uses this memory location and just so happens to set it to $A5. 
Dialogue: 0,0:06:42.56,0:06:48.96,底部中文,,0,0,0,,因为很有可能别的游戏也使用到这个内存位置 并且碰巧将它设置为0xA5
Dialogue: 0,0:06:49.92,0:06:56.83,底部英文,,0,0,0,,Or, maybe the default resting state of this particular memory cell on a particular memory chip happens to be $A5,
Dialogue: 0,0:06:49.92,0:06:56.83,底部中文,,0,0,0,,又或者某片内存芯片的某个记忆单元默认的掉电闲置状态正好是0xA5
Dialogue: 0,0:06:57.04,0:06:59.76,底部英文,,0,0,0,,and so it will always read $A5 on a cold start. 
Dialogue: 0,0:06:57.04,0:06:59.76,底部中文,,0,0,0,,导致这台机器在冷启动时总是读取到0xA5
Dialogue: 0,0:07:00.72,0:07:05.76,底部英文,,0,0,0,,This is why the game also checks the 6 bytes that correspond to the top score. 
Dialogue: 0,0:07:00.72,0:07:05.76,底部中文,,0,0,0,,这就是游戏要去额外检查对应最高分的6个字节的原因
Dialogue: 0,0:07:06.56,0:07:12.00,底部英文,,0,0,0,,Since these bytes correspond to decimal digits, they should always consist of the values 0-9. 
Dialogue: 0,0:07:06.56,0:07:12.00,底部中文,,0,0,0,,由于这些字节的含义是十进制数字 它们值的合理范围是0到9
Dialogue: 0,0:07:13.44,0:07:17.84,底部英文,,0,0,0,,Therefore, the game checks if any of these values is $0A or higher. 
Dialogue: 0,0:07:13.44,0:07:17.84,底部中文,,0,0,0,,因此 游戏会检查这些值是否有任何一个大于或等于0xA（10）
Dialogue: 0,0:07:18.48,0:07:21.76,底部英文,,0,0,0,,If any of them are, then it determines this is a cold start. 
Dialogue: 0,0:07:18.48,0:07:21.76,底部中文,,0,0,0,,如果有 则判断为冷启动
Dialogue: 0,0:07:22.96,0:07:29.39,底部英文,,0,0,0,,Therefore, the conditions for a warm start are that these six bytes stay within the range 0-9, 
Dialogue: 0,0:07:22.96,0:07:29.39,底部中文,,0,0,0,,综上所述 热启动的条件是这六个字节都在0到9的范围内
Dialogue: 0,0:07:29.60,0:07:31.76,底部英文,,0,0,0,,and that this byte is exactly $A5. 
Dialogue: 0,0:07:29.60,0:07:31.76,底部中文,,0,0,0,,并且这个字节的值等于0xA5
Dialogue: 0,0:07:32.64,0:07:36.64,底部英文,,0,0,0,,If this is the case, then the starting world number will not be erased. 
Dialogue: 0,0:07:32.64,0:07:36.64,底部中文,,0,0,0,,一旦同时满足这些条件 续关世界编号就不会被清零
Dialogue: 0,0:07:38.64,0:07:41.24,底部英文,,0,0,0,,So now I've explained the 'how' part of this process,
Dialogue: 0,0:07:38.64,0:07:41.24,底部中文,,0,0,0,,到目前为止解释了热启动检查是如何进行的
Dialogue: 0,0:07:41.62,0:07:44.58,底部英文,,0,0,0,,but it wouldn't be odd to ask at this point, 'why?'
Dialogue: 0,0:07:41.62,0:07:44.58,底部中文,,0,0,0,,但观众可能要问 这样做的目的是什么呢？
Dialogue: 0,0:07:44.58,0:07:47.36,底部英文,,0,0,0,,Why does the game have to check for a warm start? 
Dialogue: 0,0:07:44.58,0:07:47.36,底部中文,,0,0,0,,游戏为什么必须去检查是否为热启动？
Dialogue: 0,0:07:47.92,0:07:52.48,底部英文,,0,0,0,,The starting world byte is only written to after a game over (or beating the game). 
Dialogue: 0,0:07:47.92,0:07:52.48,底部中文,,0,0,0,,记录续关世界编号的这个字节只在游戏结束或者通关后被写入 
Dialogue: 0,0:07:53.40,0:07:56.56,底部英文,,0,0,0,,So it's not like this would help if you got all the way to world 7
Dialogue: 0,0:07:53.40,0:07:56.56,底部中文,,0,0,0,,如果游戏启动后 用户一路闯到第7关 这种机制基本上没有意义
Dialogue: 0,0:07:56.65,0:07:59.81,底部英文,,0,0,0,,and a lightning strike caused your console to reset briefly.
Dialogue: 0,0:07:56.65,0:07:59.81,底部中文,,0,0,0,,除非有雷击导致游戏机意外重启（需要恢复进度）
Dialogue: 0,0:07:59.81,0:08:01.76,底部英文,,0,0,0,,The reason is actually quite simple. 
Dialogue: 0,0:07:59.81,0:08:01.76,底部中文,,0,0,0,,这样做的理由其实很简单
Dialogue: 0,0:08:02.40,0:08:08.16,底部英文,,0,0,0,,After a game over or beating the game, the game essentially completely resets itself. 
Dialogue: 0,0:08:02.40,0:08:08.16,底部中文,,0,0,0,,在闯关失败或通关后 游戏会将自己完全复位
Dialogue: 0,0:08:08.16,0:08:12.16,底部英文,,0,0,0,,Which includes checking for a cold or warm start again. 
Dialogue: 0,0:08:08.16,0:08:12.16,底部中文,,0,0,0,,复位的过程包括了对冷启动和热启动的再次检查
Dialogue: 0,0:08:12.16,0:08:17.92,底部英文,,0,0,0,,Of course, this will always be detected as a warm start since none of the memory has any time to decay at all.
Dialogue: 0,0:08:12.16,0:08:17.92,底部中文,,0,0,0,,当然 检查的结果是热启动 因为主动复位的过程中不会有任何内存数据丢失
Dialogue: 0,0:08:18.13,0:08:22.50,底部英文,,0,0,0,,And at this point, the top score digits are valid from the previous playthrough,
Dialogue: 0,0:08:18.13,0:08:22.50,底部中文,,0,0,0,,此时 最高分是有效的 它被从上次游戏保留下来
Dialogue: 0,0:08:22.75,0:08:25.84,底部英文,,0,0,0,,and the $A5 byte is still there from last time too. 
Dialogue: 0,0:08:22.75,0:08:25.84,底部中文,,0,0,0,,0xA5的那个字节也会被留下来
Dialogue: 0,0:08:26.56,0:08:30.56,底部英文,,0,0,0,,And then at the title screen, it is able to detect the flag for choosing a world  
Dialogue: 0,0:08:26.56,0:08:30.56,底部中文,,0,0,0,,在标题画面 能通过读取标志位来决定是否允许选关
Dialogue: 0,0:08:30.56,0:08:32.88,底部英文,,0,0,0,,and the starting world from the previous playthrough as well. 
Dialogue: 0,0:08:30.56,0:08:32.88,底部中文,,0,0,0,,并使得玩家可以从先前游戏的世界开始游戏
Dialogue: 0,0:08:35.03,0:08:38.55,底部英文,,0,0,0,,So now you can maybe see why Tennis is the only game that can do this. 
Dialogue: 0,0:08:35.03,0:08:38.55,底部中文,,0,0,0,,接下来你就能明白为什么《网球》是唯一的可以触发此机制的游戏了
Dialogue: 0,0:08:39.36,0:08:41.67,底部英文,,0,0,0,,Any game you would want to do this trick with
Dialogue: 0,0:08:39.36,0:08:41.67,底部中文,,0,0,0,,用来配合触发“水下256关”的游戏
Dialogue: 0,0:08:41.88,0:08:48.80,底部英文,,0,0,0,,would need to either keep the 6 digits of the top score between 0 and 9, or just not touch those memory values at all. 
Dialogue: 0,0:08:41.88,0:08:48.80,底部中文,,0,0,0,,要么能使最高分的六位数字保持在0到9之间 要么压根不修改它们的值
Dialogue: 0,0:08:49.68,0:08:53.10,底部英文,,0,0,0,,It would also need to keep the $A5 value there,
Dialogue: 0,0:08:49.68,0:08:53.10,底部中文,,0,0,0,,同时还需要保证0xA5这个值还在
Dialogue: 0,0:08:53.22,0:08:58.41,底部英文,,0,0,0,,which means it either needs to set it to $A5 itself, or just not touch that memory address.
Dialogue: 0,0:08:53.22,0:08:58.41,底部中文,,0,0,0,,也就是说在这里重新写入0xA5 或者不修改这里的值
Dialogue: 0,0:08:59.14,0:09:01.84,底部英文,,0,0,0,,And then in order to start at whatever world you wanted,
Dialogue: 0,0:08:59.14,0:09:01.84,底部中文,,0,0,0,,并且为了实现自由选择进入的异常世界
Dialogue: 0,0:09:02.00,0:09:06.48,底部英文,,0,0,0,,the game needs to use the memory address where Super Mario Bros. stores the starting world.
Dialogue: 0,0:09:02.00,0:09:06.48,底部中文,,0,0,0,,这款游戏还需要使用到《超级马里奥兄弟》存储续关世界编号的内存地址
Dialogue: 0,0:09:07.16,0:09:15.12,底部英文,,0,0,0,,It's just a lot of particular stuff that is theoretically very easy to do, but in practice very very few games are potential candidates. 
Dialogue: 0,0:09:07.16,0:09:15.12,底部中文,,0,0,0,,这是件说起来容易但做起来难的事情 能作为候选的游戏屈指可数
Dialogue: 0,0:09:16.08,0:09:21.60,底部英文,,0,0,0,,Most games always wipe all of the memory no matter if it is coming from a cold start or warm start,  
Dialogue: 0,0:09:16.08,0:09:21.60,底部中文,,0,0,0,,大部分游戏都会在启动时清空所有内存 而不区分是冷启动还是热启动
Dialogue: 0,0:09:21.60,0:09:25.60,底部英文,,0,0,0,,so those are automatically no good since they destroy that $A5 value. 
Dialogue: 0,0:09:21.60,0:09:25.60,底部中文,,0,0,0,,显然这些游戏不能用来触发此漏洞 它们会破坏0xA5这个值
Dialogue: 0,0:09:26.40,0:09:31.52,底部英文,,0,0,0,,And any game that doesn't wipe memory or doesn't even use any of the memory around this location  
Dialogue: 0,0:09:26.40,0:09:31.52,底部中文,,0,0,0,,而对于那些不清理甚至不使用这片内存区域的游戏
Dialogue: 0,0:09:31.52,0:09:36.88,底部英文,,0,0,0,,is unlikely to only use the specific location where the continue world value is held. 
Dialogue: 0,0:09:31.52,0:09:36.88,底部中文,,0,0,0,,则不太可能只使用这个存储续关世界编号的特定位置
Dialogue: 0,0:09:38.40,0:09:41.52,底部英文,,0,0,0,,Let's see what exactly is going on in memory when we try this trick. 
Dialogue: 0,0:09:38.40,0:09:41.52,底部中文,,0,0,0,,一起来看看在尝试这个技巧时 内存中发生了哪些变化
Dialogue: 0,0:09:42.48,0:09:46.00,底部英文,,0,0,0,,First, we pop in Super Mario Bros. for the first time and start the game. 
Dialogue: 0,0:09:42.48,0:09:46.00,底部中文,,0,0,0,,首先 我们第一次插入《超级马里奥兄弟》的卡带并启动游戏 
Dialogue: 0,0:09:46.72,0:09:53.10,底部英文,,0,0,0,,Here we see that the game detects a cold start and all of the memory values we are interested in get reset to zero.
Dialogue: 0,0:09:46.72,0:09:53.10,底部中文,,0,0,0,,可以看到游戏检测到冷启动 将内存中我们感兴趣的所有值复位为0
Dialogue: 0,0:09:53.34,0:10:00.56,底部英文,,0,0,0,,The game timer is actually set to 401 on the title screen, and then that last byte is set to $A5 right away. 
Dialogue: 0,0:09:53.34,0:10:00.56,底部中文,,0,0,0,,在标题画面 游戏计时器被设置为401 而区域最后一个字节被立刻设置为0xA5
Dialogue: 0,0:10:01.68,0:10:04.72,底部英文,,0,0,0,,We only need Mario here at the start to get that $A5 value,  
Dialogue: 0,0:10:01.68,0:10:04.72,底部中文,,0,0,0,,一开始运行《马里奥》游戏的意义只是获得这里的0xA5
Dialogue: 0,0:10:04.72,0:10:07.29,底部英文,,0,0,0,,so at this point we can swap over to Tennis.
Dialogue: 0,0:10:04.72,0:10:07.29,底部中文,,0,0,0,,这时就可以把卡带换为《网球》
Dialogue: 0,0:10:07.29,0:10:12.56,底部英文,,0,0,0,,Tennis is one of the smaller set of games that doesn't completely wipe out memory when it starts up. 
Dialogue: 0,0:10:07.29,0:10:12.56,底部中文,,0,0,0,,《网球》是为数不多的在启动时不对内存做完全清空的游戏
Dialogue: 0,0:10:13.52,0:10:18.64,底部英文,,0,0,0,,As its title jingle plays, it uses 6 bytes in this range, but it leaves everything else alone. 
Dialogue: 0,0:10:13.52,0:10:18.64,底部中文,,0,0,0,,当播放标题音乐时 只用到这个范围内的6个字节 其他数据均保持不变
Dialogue: 0,0:10:19.76,0:10:23.44,底部英文,,0,0,0,,We start up a match and are ready to serve the ball, and nothing has changed yet. 
Dialogue: 0,0:10:19.76,0:10:23.44,底部中文,,0,0,0,,开始一个回合并准备好发球 并没有数据发生改变
Dialogue: 0,0:10:24.08,0:10:27.68,底部英文,,0,0,0,,But as soon as we start playing, we see two more values get used. 
Dialogue: 0,0:10:24.08,0:10:27.68,底部中文,,0,0,0,,但在游戏开始后 可以发现又有两字节的数据被使用了
Dialogue: 0,0:10:28.56,0:10:32.24,底部英文,,0,0,0,,The byte we are interested in slowly increments as you run around the court. 
Dialogue: 0,0:10:28.56,0:10:32.24,底部中文,,0,0,0,,我们关注的这个字节会伴随玩家在球场上的跑动缓慢增加
Dialogue: 0,0:10:32.96,0:10:37.92,底部英文,,0,0,0,,This value is used by the game to play the footstep sounds your character makes as you walk around.
Dialogue: 0,0:10:32.96,0:10:37.92,底部中文,,0,0,0,,当玩家走动时 这里的数据被用作播放角色的脚步声
Dialogue: 0,0:10:38.24,0:10:41.52,底部英文,,0,0,0,,Each footstep sound will increment this value by one.
Dialogue: 0,0:10:38.24,0:10:41.52,底部中文,,0,0,0,,每一次脚步声都会将这个值增加1
Dialogue: 0,0:10:41.88,0:10:46.30,底部英文,,0,0,0,,You can actually control this very easily by tapping a button on the d-pad very gently. 
Dialogue: 0,0:10:41.88,0:10:46.30,底部中文,,0,0,0,,通过轻触十字键中的某个键 就可以轻易地控制这个值的增长
Dialogue: 0,0:10:47.12,0:10:51.00,底部英文,,0,0,0,,This also explains why the value doesn't change until the music stops.
Dialogue: 0,0:10:47.12,0:10:51.00,底部中文,,0,0,0,,同样 这解释了为什么在音乐停止前这里的值都不会改变
Dialogue: 0,0:10:51.36,0:10:54.24,底部英文,,0,0,0,,The footstep sounds aren't played if the music is still going. 
Dialogue: 0,0:10:51.36,0:10:54.24,底部中文,,0,0,0,,当音乐还在播放时 是不会发出脚步声的
Dialogue: 0,0:10:56.00,0:11:00.08,底部英文,,0,0,0,,Since the value started at zero (since Super Mario Bros. cleared it),
Dialogue: 0,0:10:56.00,0:11:00.08,底部中文,,0,0,0,,因为《超级马里奥兄弟》将这个值清零了 它从0开始增长
Dialogue: 0,0:11:00.40,0:11:06.16,底部英文,,0,0,0,,it only takes a little bit of walking around to get this value above 7, which corresponds to worlds greater than 8. 
Dialogue: 0,0:11:00.40,0:11:06.16,底部中文,,0,0,0,,只需要稍稍移动角色 就可以使得值增长到7以上 它对应了编号大于8的世界
Dialogue: 0,0:11:00.40,0:11:06.16,顶部注释,,0,0,0,,注：能修改《马里奥》续关世界编号的游戏不止《网球》，但《网球》巧在还能让玩家自由控制这个值
Dialogue: 0,0:11:07.52,0:11:13.84,底部英文,,0,0,0,,Notice here that Tennis does not even touch any of the bytes that correspond to the top score digits in Mario. 
Dialogue: 0,0:11:07.52,0:11:13.84,底部中文,,0,0,0,,可以看到《网球》甚至没有使用到对应《马里奥》最高分的任何一个字节
Dialogue: 0,0:11:14.48,0:11:17.84,底部英文,,0,0,0,,At this point, we can pop out Tennis and put Super Mario Bros. back in. 
Dialogue: 0,0:11:14.48,0:11:17.84,底部中文,,0,0,0,,这样 我们可以将《网球》取出来 重新插入《超级马里奥兄弟》
Dialogue: 0,0:11:19.04,0:11:24.08,底部英文,,0,0,0,,The top score digits are all zero (since they were cleared the first time we put Mario in),  
Dialogue: 0,0:11:19.04,0:11:24.08,底部中文,,0,0,0,,因为在第一次放入《马里奥》时被清零 最高分的所有位都是0
Dialogue: 0,0:11:24.08,0:11:28.64,底部英文,,0,0,0,,and the special $A5 byte is still there (since Tennis didn't touch it),  
Dialogue: 0,0:11:24.08,0:11:28.64,底部中文,,0,0,0,,特殊的0xA5字节没有被《网球》使用而继续留在那里
Dialogue: 0,0:11:28.64,0:11:33.44,底部英文,,0,0,0,,so the game deems this as a warm start, and doesn't zero out any of the values here. 
Dialogue: 0,0:11:28.64,0:11:33.44,底部中文,,0,0,0,,因而游戏认为是一次热启动 不会把这里的任何值清零
Dialogue: 0,0:11:34.24,0:11:38.40,底部英文,,0,0,0,,We now have Super Mario Bros. running where this starting world value is 8. 
Dialogue: 0,0:11:34.24,0:11:38.40,底部中文,,0,0,0,,最终造成了正在运行的《超级马里奥兄弟》的续关世界编号为8
Dialogue: 0,0:11:39.04,0:11:43.28,底部英文,,0,0,0,,So holding A and pressing start will start at level 9-1. 
Dialogue: 0,0:11:39.04,0:11:43.28,底部中文,,0,0,0,,按住A键的同时按下开始键 游戏将从关卡9-1开始
Dialogue: 0,0:11:51.04,0:11:56.32,底部英文,,0,0,0,,So, why does level 9-1 look like level 6-2 but underwater? 
Dialogue: 0,0:11:51.04,0:11:56.32,底部中文,,0,0,0,,但是 为什么关卡9-1是关卡6-2的水下版本呢？
Dialogue: 0,0:11:56.32,0:12:00.80,底部英文,,0,0,0,,To answer that question, you'll have to look forward to part 2 of this 3-part mini-series. 
Dialogue: 0,0:11:56.32,0:12:00.80,底部中文,,0,0,0,,这个问题将会在这个有三集的迷你系列中的第二和第三部分得到解答
Dialogue: 0,0:12:00.80,0:12:05.04,底部英文,,0,0,0,,In the next video, we'll look at how all of the levels are stored in the game's ROM. 
Dialogue: 0,0:12:00.80,0:12:05.04,底部中文,,0,0,0,,在下一个视频中 我们会探讨该游戏的所有关卡在游戏ROM中的存储方式
Dialogue: 0,0:12:05.84,0:12:07.12,底部英文,,0,0,0,,Thank you for watching.
Dialogue: 0,0:12:05.84,0:12:07.12,底部中文,,0,0,0,,感谢您的观看！
Dialogue: 0,0:12:05.84,0:12:07.12,顶部注释,,0,0,0,,【译者：某科学的小姚同志，翻译不易，感谢陪伴！内容仅供技术交流，侵删，赞助和支持视频作者的方式在评论区中QwQ】
Dialogue: 0,0:12:07.12,0:12:09.12,底部中文,,0,0,0,,【剩下接近一分钟的视频是赞助墙和频道信息，没有解说内容啦 (≥﹏ ≤)】
