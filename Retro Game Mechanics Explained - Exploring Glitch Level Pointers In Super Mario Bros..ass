[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 3840
PlayResY: 2160

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: 原片.mp4
Video File: 原片.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.250000
Scroll Position: 344
Active Line: 347
Video Position: 48453

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: 底部中文,Source Han Sans CN,120,&H00FFFFFF,&H000000FF,&H00FF5200,&H00000000,-1,0,0,0,100,100,0,0,1,3,1.6,2,10,10,10,1
Style: 底部英文,Comic Sans MS,86,&H00FFFFFF,&H000000FF,&H00FF459A,&H00000000,-1,0,0,0,100,100,0,0,1,1.2,2.4,2,10,10,10,1
Style: 顶部注释,Source Han Sans CN,80,&H00FFFFFF,&H000000FF,&H00C500FF,&H00000000,0,0,0,0,100,100,0,0,1,0.8,0.8,8,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.18,0:00:03.96,底部英文,,0,0,0,,So in the last video we discovered how you can use the game Tennis
Dialogue: 0,0:00:00.18,0:00:03.96,底部中文,,0,0,0,,在上一期视频中 我们介绍了如何使用游戏《网球》
Dialogue: 0,0:00:04.08,0:00:06.84,底部英文,,0,0,0,,to get to glitched levels in Super Mario Bros.
Dialogue: 0,0:00:04.08,0:00:06.84,底部中文,,0,0,0,,来触发《超级马里奥兄弟》的“水下256关”
Dialogue: 0,0:00:07.62,0:00:11.38,底部英文,,0,0,0,,If you haven't seen that video yet, I highly suggest watching that video first.
Dialogue: 0,0:00:07.62,0:00:11.38,底部中文,,0,0,0,,如果还没有看过 墙裂建议先去看看
Dialogue: 0,0:00:07.62,0:00:11.38,顶部注释,,0,0,0,,注：自译熟肉BV1Be411E7xZ，在阿婆的空间可以找到
Dialogue: 0,0:00:11.88,0:00:15.20,底部英文,,0,0,0,,In this video we'll see why the glitch levels we see
Dialogue: 0,0:00:11.88,0:00:15.20,底部中文,,0,0,0,,在本期视频中将会分析为什么触发的异常关卡
Dialogue: 0,0:00:15.26,0:00:18.48,底部英文,,0,0,0,,can be weird versions of levels that are normally found in the game.
Dialogue: 0,0:00:15.26,0:00:18.48,底部中文,,0,0,0,,有可能是游戏里正常关卡的诡异变种
Dialogue: 0,0:00:18.48,0:00:23.46,底部英文,,0,0,0,,Just like level 9-1 here being level 6-2 but underwater!
Dialogue: 0,0:00:18.48,0:00:23.46,底部中文,,0,0,0,,比如说这里的关卡9-1就是关卡6-2的水下版本
Dialogue: 0,0:00:29.34,0:00:33.02,底部英文,,0,0,0,,There are 34 unique 'levels' in Super Mario Bros.
Dialogue: 0,0:00:29.34,0:00:33.02,底部中文,,0,0,0,,《超级玛丽奥兄弟》中有34个不同的所谓“关卡”
Dialogue: 0,0:00:29.34,0:00:33.02,顶部注释,,0,0,0,,注：这里所述的“关卡”是广义表述，倒不如说是“场景”更为合适
Dialogue: 0,0:00:33.46,0:00:35.40,底部英文,,0,0,0,,Well, there are 32 levels,
Dialogue: 0,0:00:33.46,0:00:35.40,底部中文,,0,0,0,,游戏本身有32关
Dialogue: 0,0:00:35.40,0:00:37.08,底部英文,,0,0,0,,but a lot of them are duplicates.
Dialogue: 0,0:00:35.40,0:00:37.08,底部中文,,0,0,0,,但很多关卡是重复的
Dialogue: 0,0:00:37.65,0:00:42.18,底部英文,,0,0,0,,Like for example, level 5-3 is just level 1-3
Dialogue: 0,0:00:37.65,0:00:42.18,底部中文,,0,0,0,,比如说关卡5-3和关卡1-3实际上是相同的
Dialogue: 0,0:00:42.32,0:00:45.60,底部英文,,0,0,0,,but there's Bullet Bills flying around and the platforms are shorter.
Dialogue: 0,0:00:42.32,0:00:45.60,底部中文,,0,0,0,,只是关卡5-3中有子弹头飞来飞去 并且浮动平台要更短些
Dialogue: 0,0:00:42.32,0:00:45.60,顶部注释,,0,0,0,,注："Bullet Bills"即所谓“比尔子弹”，设定是反派:鲍瑟·库帕（Bowser Koopa）控制下的“比尔玩具枪”发射出的黑色子弹
Dialogue: 0,0:00:46.20,0:00:50.34,底部英文,,0,0,0,,There's a flag in the game that can convert a level into a harder version of itself,
Dialogue: 0,0:00:46.20,0:00:50.34,底部中文,,0,0,0,,游戏中有一个将某个关卡转换为困难版的标志
Dialogue: 0,0:00:50.34,0:00:53.94,底部英文,,0,0,0,,so for our purposes here, these are considered the same level.
Dialogue: 0,0:00:50.34,0:00:53.94,底部中文,,0,0,0,,所以在分析中 我们将这些关卡视为同一个
Dialogue: 0,0:00:54.78,0:00:57.52,底部英文,,0,0,0,,This leaves us with 27 unique levels.
Dialogue: 0,0:00:54.78,0:00:57.52,底部中文,,0,0,0,,如此 就只剩下27个不同的关卡了
Dialogue: 0,0:00:58.36,0:01:00.72,底部英文,,0,0,0,,Then you have the 2 cloud bonus rooms,
Dialogue: 0,0:00:58.36,0:01:00.72,底部中文,,0,0,0,,此外 还应该算上2个位于云彩上方可以吃硬币的空间
Dialogue: 0,0:00:58.36,0:01:00.72,顶部注释,,0,0,0,,注：关卡2-1和5-2的藤曼爬上去到达白天版本的加分空间， 而关卡3-1和6-2的藤曼爬上去到达黑夜版本的加分空间
Dialogue: 0,0:01:01.10,0:01:03.14,底部英文,,0,0,0,,the warp zone in 4-2,
Dialogue: 0,0:01:01.10,0:01:03.14,顶部注释,,0,0,0,,注："Warp Zone"，直译为“扭曲地带”，通向其它世界的黑洞；关卡4-2中从藤曼机关爬上去到达跳关区，可以选择进入第6/7/8个世界
Dialogue: 0,0:01:01.10,0:01:03.14,顶部注释,,0,0,0,,关卡1-2借助上升平台跳上屋顶，也有个跳关区，通往世界2/3/4，但它是关卡1-2的一部分，而4-2的跳关区是独立场景（载入时屏幕黑一下）
Dialogue: 0,0:01:01.10,0:01:03.14,底部中文,,0,0,0,,和关卡4-2中允许跳关的区域
Dialogue: 0,0:01:03.40,0:01:05.39,底部英文,,0,0,0,,the water room in 8-4, 
Dialogue: 0,0:01:03.40,0:01:05.39,底部中文,,0,0,0,,还有关卡8-4中出现的水下空间
Dialogue: 0,0:01:03.40,0:01:05.39,顶部注释,,0,0,0,,注：在关卡8-4，从地图一半左右位置的一根管子钻下去，进入这片水下空间
Dialogue: 0,0:01:05.39,0:01:09.06,底部英文,,0,0,0,,and the water room used in both 5-2 and 6-2.
Dialogue: 0,0:01:05.39,0:01:09.06,底部中文,,0,0,0,,以及另一个在关卡5-2和6-2中共用的水下空间
Dialogue: 0,0:01:10.14,0:01:14.58,底部英文,,0,0,0,,And then finally the cutscene room that plays before underground and water levels,
Dialogue: 0,0:01:10.14,0:01:14.58,底部中文,,0,0,0,,再算上这个在地下和水下关卡之前播放的过场区域
Dialogue: 0,0:01:14.58,0:01:16.63,底部英文,,0,0,0,,as well as the underground bonus rooms
Dialogue: 0,0:01:14.58,0:01:16.63,底部中文,,0,0,0,,最后还有这片位于地下的加分空间
Dialogue: 0,0:01:16.96,0:01:19.44,底部英文,,0,0,0,,which are actually all located in the same level.
Dialogue: 0,0:01:16.96,0:01:19.44,底部中文,,0,0,0,,所有地下的加分空间实际上位于同一个场景中
Dialogue: 0,0:01:20.82,0:01:25.26,底部英文,,0,0,0,,Each of the 34 levels is assigned a unique ID of sorts.
Dialogue: 0,0:01:20.82,0:01:25.26,底部中文,,0,0,0,,这34个关卡（场景） 的每一个都被分配了独一无二的标识码（ID）
Dialogue: 0,0:01:25.26,0:01:30.96,底部英文,,0,0,0,,But if you think the ID numbers are simply just 0 through 33, you are sorely mistaken.
Dialogue: 0,0:01:25.26,0:01:30.96,底部中文,,0,0,0,,但如果你认为ID只是简单地从0编号到33 那就大错特错了
Dialogue: 0,0:01:31.56,0:01:36.36,底部英文,,0,0,0,,See, the ID for each level also encodes what kind of level it is.
Dialogue: 0,0:01:31.56,0:01:36.36,底部中文,,0,0,0,,每一关的ID还编码有关卡类型
Dialogue: 0,0:01:37.32,0:01:43.38,底部英文,,0,0,0,,There are four types of levels: overworld, underground, castle, and water.
Dialogue: 0,0:01:37.32,0:01:43.38,底部中文,,0,0,0,,关卡的类型有四种 分别为主世界 地下 城堡和水下
Dialogue: 0,0:01:44.28,0:01:47.72,底部英文,,0,0,0,,Each of the levels is organized into these four groups,
Dialogue: 0,0:01:44.28,0:01:47.72,底部中文,,0,0,0,,每个关卡都被归入这四组之一
Dialogue: 0,0:01:47.88,0:01:50.50,底部英文,,0,0,0,,and then numbers are assigned within each group.
Dialogue: 0,0:01:47.88,0:01:50.50,底部中文,,0,0,0,,再对每组内的关卡分别进行编号
Dialogue: 0,0:01:51.00,0:01:53.80,底部英文,,0,0,0,,Water levels have numbers 0-2,
Dialogue: 0,0:01:51.00,0:01:53.80,底部中文,,0,0,0,,水下关卡被编号为0到2
Dialogue: 0,0:01:54.30,0:01:57.34,底部英文,,0,0,0,,overworld levels have numbers 0-21,
Dialogue: 0,0:01:54.30,0:01:57.34,底部中文,,0,0,0,,主世界关卡的编号是0到21
Dialogue: 0,0:01:57.72,0:02:00.27,底部英文,,0,0,0,,underground levels have numbers 0-2,
Dialogue: 0,0:01:57.72,0:02:00.27,底部中文,,0,0,0,,地下关卡的编号是0到2
Dialogue: 0,0:02:00.54,0:02:03.10,底部英文,,0,0,0,,and castle levels have numbers 0-5.
Dialogue: 0,0:02:00.54,0:02:03.10,底部中文,,0,0,0,,城堡关卡的编号是0到5
Dialogue: 0,0:02:04.08,0:02:07.63,底部英文,,0,0,0,,The overall ID of a level is made up of 7 bits.
Dialogue: 0,0:02:04.08,0:02:07.63,底部中文,,0,0,0,,完整的关卡ID一共有7位
Dialogue: 0,0:02:08.28,0:02:11.70,底部英文,,0,0,0,,The lower 5 bits are the level number within the sublist.
Dialogue: 0,0:02:08.28,0:02:11.70,底部中文,,0,0,0,,低5位是关卡在组内的编号
Dialogue: 0,0:02:12.34,0:02:14.84,底部英文,,0,0,0,,And the next 2 bits are the level type,
Dialogue: 0,0:02:12.34,0:02:14.84,底部中文,,0,0,0,,而更高的2位表示关卡类型
Dialogue: 0,0:02:12.34,0:02:14.84,顶部注释,,0,0,0,,注：也就是说，关卡ID是位图（Bitmap）表示，将位分组，每组都是可解释的\N这里“标识码”或"ID"的表述和第一集中“世界编号”相区分，后者是游戏中世界自然地按序编号，而非位图
Dialogue: 0,0:02:15.10,0:02:21.84,底部英文,,0,0,0,,where water is 00, overworld is 01, underground is 10, and castle is 11.
Dialogue: 0,0:02:15.10,0:02:21.84,底部中文,,0,0,0,,0b00表示水下 0b01表示主世界 0b10表示地下 0b11表示城堡
Dialogue: 0,0:02:15.10,0:02:21.84,顶部注释,,0,0,0,,注：和C语言一样，字幕使用"0x"前缀表示十六进制，使用"0b"表示二进制
Dialogue: 0,0:02:23.22,0:02:28.44,底部英文,,0,0,0,,This means that the ID of a level can range anywhere from 0 to $7F,
Dialogue: 0,0:02:23.22,0:02:28.44,底部中文,,0,0,0,,这意味着关卡ID的范围是从0到0x7F
Dialogue: 0,0:02:23.22,0:02:28.44,顶部注释,,0,0,0,,注：即一个字节的8位中只有7位有效，最高位始终为0
Dialogue: 0,0:02:28.80,0:02:30.82,底部英文,,0,0,0,,although most IDs aren't used.
Dialogue: 0,0:02:28.80,0:02:30.82,底部中文,,0,0,0,,即使其中有很多并没有被游戏使用
Dialogue: 0,0:02:31.60,0:02:34.20,底部英文,,0,0,0,,We can organize them in a nice table like this.
Dialogue: 0,0:02:31.60,0:02:34.20,底部中文,,0,0,0,,据此 我们将关卡重新组织成这样一张美观的表格
Dialogue: 0,0:02:35.10,0:02:41.10,底部英文,,0,0,0,,For water levels, the type bits are 00, so the overal IDs are $00 through $02.
Dialogue: 0,0:02:35.10,0:02:41.10,底部中文,,0,0,0,,对于水下关卡 表示类型的位是0b00 因而ID的范围是0x00到0x02
Dialogue: 0,0:02:42.00,0:02:48.42,底部英文,,0,0,0,,For overworld levels, the type bits are 01, so the IDs go from $20 to $35.
Dialogue: 0,0:02:42.00,0:02:48.42,底部中文,,0,0,0,,对于主世界关卡 类型位是0b01 ID从0x20取到0x35
Dialogue: 0,0:02:49.20,0:02:54.24,底部英文,,0,0,0,,For underground levels, the bits are 10, and the IDs go from $40 to $42.
Dialogue: 0,0:02:49.20,0:02:54.24,底部中文,,0,0,0,,水下关卡的类型位是0b10 ID从0x40取到0x42
Dialogue: 0,0:02:54.84,0:03:00.60,底部英文,,0,0,0,,And for castle levels, the bits are 11, so the IDs go from $60 to $65.
Dialogue: 0,0:02:54.84,0:03:00.60,底部中文,,0,0,0,,最后 城堡关卡的类型是0b11 ID从0x60取到0x65
Dialogue: 0,0:03:01.50,0:03:03.24,底部英文,,0,0,0,,So an interesting question would be:
Dialogue: 0,0:03:01.50,0:03:03.24,底部中文,,0,0,0,,这引出了一个有趣的问题
Dialogue: 0,0:03:03.24,0:03:07.50,底部英文,,0,0,0,,What about all these other IDs that aren't assigned to levels; what do they do?
Dialogue: 0,0:03:03.24,0:03:07.50,底部中文,,0,0,0,,那些没有被分配到关卡的ID又怎么样呢？它们会有用吗？
Dialogue: 0,0:03:08.46,0:03:13.02,底部英文,,0,0,0,,To answer this we have to look at how the level pointers are stored in the game's ROM.
Dialogue: 0,0:03:08.46,0:03:13.02,底部中文,,0,0,0,,为了回答 先来了解关卡指针是怎样存储在游戏ROM里的
Dialogue: 0,0:03:14.28,0:03:17.00,底部英文,,0,0,0,,There are actually four separate pointer lists, 
Dialogue: 0,0:03:14.28,0:03:17.00,底部中文,,0,0,0,,事实上 存在四个指针数组
Dialogue: 0,0:03:17.40,0:03:19.40,底部英文,,0,0,0,,two for all the level's tile data,
Dialogue: 0,0:03:17.40,0:03:19.40,底部中文,,0,0,0,,两个用于所有关卡的图块数据
Dialogue: 0,0:03:19.62,0:03:22.14,底部英文,,0,0,0,,and two for all the level's enemy and sprite data.
Dialogue: 0,0:03:19.62,0:03:22.14,底部中文,,0,0,0,,而另外两个用于所有关卡的敌人和精灵数据
Dialogue: 0,0:03:19.62,0:03:22.14,顶部注释,,0,0,0,,注：“图块”和“精灵”是早期2D游戏图像绘制中的概念，红白机PPU的设计中有直接对应\N“图块”一般指可重复利用的位图图元，“精灵”是游戏里的可动区域（一般是游戏中的角色或其它需要检查碰撞的元素）\N这里借用了以上的高级语义，指针指向的内容是游戏编程中的结构，并不一定直接指向PPU绘制绑定的相关内存区域，具体请看下集
Dialogue: 0,0:03:23.27,0:03:25.98,底部英文,,0,0,0,,The level pointers are 16-bit values,
Dialogue: 0,0:03:23.27,0:03:25.98,底部中文,,0,0,0,,每个关卡指针都是16位的数据
Dialogue: 0,0:03:23.27,0:03:25.98,顶部注释,,0,0,0,,注：16位地址可以覆盖6502 CPU的整个内存地址空间
Dialogue: 0,0:03:25.98,0:03:29.70,底部英文,,0,0,0,,and to simplify the code needed to read data from these tables,
Dialogue: 0,0:03:25.98,0:03:29.70,底部中文,,0,0,0,,为了使从这些数组中读取数据的代码变得简单
Dialogue: 0,0:03:29.70,0:03:35.28,底部英文,,0,0,0,,the upper 8 bits are stored in one list, while the lower 8 bits are stored in another list.
Dialogue: 0,0:03:29.70,0:03:35.28,底部中文,,0,0,0,,指针的高8位被存入一个数组 而低8位被存入另一个数组
Dialogue: 0,0:03:36.18,0:03:39.72,底部英文,,0,0,0,,This way if you want, say, the 13th pointer in the list,
Dialogue: 0,0:03:36.18,0:03:39.72,底部中文,,0,0,0,,在这样的设计下 如果需要从数组中读取第13个指针
Dialogue: 0,0:03:40.19,0:03:45.54,底部英文,,0,0,0,,you take the 13th byte in each list and concatenate them together to get a 16-bit pointer.
Dialogue: 0,0:03:40.19,0:03:45.54,底部中文,,0,0,0,,就需要从每个半指针数组中分别取出第13个字节 再将它们拼接成一个16位的指针
Dialogue: 0,0:03:46.56,0:03:51.06,底部英文,,0,0,0,,In the table of IDs we made, there are gaps inbetween the different types of levels.
Dialogue: 0,0:03:46.56,0:03:51.06,底部中文,,0,0,0,,在之前的ID表格中 不同类型的关卡之间 ID并不连续
Dialogue: 0,0:03:51.06,0:03:55.74,底部英文,,0,0,0,,However, the pointers to the level data are stored in one contiguous chunk.
Dialogue: 0,0:03:51.06,0:03:55.74,底部中文,,0,0,0,,但指向关卡数据的指针被存放在一个连续的块中
Dialogue: 0,0:03:56.64,0:04:01.62,底部英文,,0,0,0,,For the sprite data, all of the castle levels come first and have indices 0 to 5,
Dialogue: 0,0:03:56.64,0:04:01.62,底部中文,,0,0,0,,在精灵数据的指针数组中 城堡关卡在最前面 数组索引是0到5
Dialogue: 0,0:04:01.62,0:04:05.04,底部英文,,0,0,0,,then the overworld levels in order 6 to 27,
Dialogue: 0,0:04:01.62,0:04:05.04,底部中文,,0,0,0,,紧接着是索引为6到27的主世界关卡
Dialogue: 0,0:04:05.82,0:04:11.70,底部英文,,0,0,0,,then the underground levels 28 to 30, and finally the water levels 31 to 33.
Dialogue: 0,0:04:05.82,0:04:11.70,底部中文,,0,0,0,,然后是地下关卡 索引为28到30 最后是水下关卡 索引为31到33
Dialogue: 0,0:04:12.90,0:04:18.14,底部英文,,0,0,0,,For the tile data though, all of the water levels come first with indices 0 to 2,
Dialogue: 0,0:04:12.90,0:04:18.14,底部中文,,0,0,0,,图块数据的指针数组顺序有所不同 所有水下关卡排在最前面（索引为0到2）
Dialogue: 0,0:04:18.47,0:04:21.56,底部英文,,0,0,0,,then the overworld levels 3 to 24,
Dialogue: 0,0:04:18.47,0:04:21.56,底部中文,,0,0,0,,此后索引3到24是主世界关卡
Dialogue: 0,0:04:21.92,0:04:24.62,底部英文,,0,0,0,,then the underground levels 25 to 27,
Dialogue: 0,0:04:21.92,0:04:24.62,底部中文,,0,0,0,,索引25到27是地下关卡
Dialogue: 0,0:04:24.78,0:04:27.72,底部英文,,0,0,0,,followed by the castle levels 28 to 33.
Dialogue: 0,0:04:24.78,0:04:27.72,底部中文,,0,0,0,,索引28到33是城堡关卡
Dialogue: 0,0:04:28.56,0:04:30.84,底部英文,,0,0,0,,Who knows why they are stored in a different order,
Dialogue: 0,0:04:28.56,0:04:30.84,底部中文,,0,0,0,,不清楚开发者为什么要按照不同的顺序存储这些数据
Dialogue: 0,0:04:30.84,0:04:33.62,底部英文,,0,0,0,,because it just make things more complicated and nuanced!
Dialogue: 0,0:04:30.84,0:04:33.62,底部中文,,0,0,0,,这样只是使得情况变得更加复杂和微妙
Dialogue: 0,0:04:34.12,0:04:37.88,底部英文,,0,0,0,,In order to easily access each of the different types of levels,
Dialogue: 0,0:04:34.12,0:04:37.88,底部中文,,0,0,0,,为了便于访问到不同类型的关卡
Dialogue: 0,0:04:37.88,0:04:45.23,底部英文,,0,0,0,,there are also two smaller tables that indicate the offsets at which each of the different types start in this list,
Dialogue: 0,0:04:37.88,0:04:45.23,底部中文,,0,0,0,,另有两个用于指示不同类型关卡在大数组中开始位置（偏移量）的小数组
Dialogue: 0,0:04:45.23,0:04:48.66,底部英文,,0,0,0,,in the order of water, overworld, underground, and castle.
Dialogue: 0,0:04:45.23,0:04:48.66,底部中文,,0,0,0,,小数组的组织顺序是：水下-主世界-地下-城堡
Dialogue: 0,0:04:45.23,0:04:48.66,顶部注释,,0,0,0,,注：这个顺序和关卡ID位图最高两位表示关卡类型的设计相统一，可以位操作分离出ID所有7位的高两位，直接索引小数组
Dialogue: 0,0:04:49.74,0:04:52.19,底部英文,,0,0,0,,Think of this as a sort of table of contents
Dialogue: 0,0:04:49.74,0:04:52.19,底部中文,,0,0,0,,可以把小数组当作某种意义上的“目录”
Dialogue: 0,0:04:52.19,0:04:57.06,底部英文,,0,0,0,,It's just like page at the start of a book that tells you where each chapter starts.
Dialogue: 0,0:04:52.19,0:04:57.06,底部中文,,0,0,0,,和书本最前面几页会告诉你每一章从哪里开始是一个道理
Dialogue: 0,0:04:57.39,0:05:04.04,底部英文,,0,0,0,,So for the sprite data, this table is just $1F, $06, $1C, $00.
Dialogue: 0,0:04:57.39,0:05:04.04,底部中文,,0,0,0,,因此 对于精灵数据 小数组中的四个元素分别为0x1F 0x06 0x1C和0x00
Dialogue: 0,0:05:04.66,0:05:08.40,底部英文,,0,0,0,,Remember all the indices mentioned in this video are zero-based,
Dialogue: 0,0:05:04.66,0:05:08.40,底部中文,,0,0,0,,不要忘记 视频中提到的所有索引都是从0开始的
Dialogue: 0,0:05:08.68,0:05:12.54,底部英文,,0,0,0,,so water levels start at index 31 ($1F),
Dialogue: 0,0:05:08.68,0:05:12.54,底部中文,,0,0,0,,所以水下关卡从索引31或0x1F开始
Dialogue: 0,0:05:13.06,0:05:15.37,底部英文,,0,0,0,,overworld levels at index 6,
Dialogue: 0,0:05:13.06,0:05:15.37,底部中文,,0,0,0,,主世界关卡从索引6开始
Dialogue: 0,0:05:15.82,0:05:19.66,底部英文,,0,0,0,,underground levels at index 28 ($1C),
Dialogue: 0,0:05:15.82,0:05:19.66,底部中文,,0,0,0,,地下关卡从索引28或0x1C开始
Dialogue: 0,0:05:19.82,0:05:22.26,底部英文,,0,0,0,,and castle levels at index 0.
Dialogue: 0,0:05:19.82,0:05:22.26,底部中文,,0,0,0,,而城堡关卡从索引0开始
Dialogue: 0,0:05:23.28,0:05:28.68,底部英文,,0,0,0,,And the table for the tile data is just $00, $03, $19, $1C.
Dialogue: 0,0:05:23.28,0:05:28.68,底部中文,,0,0,0,,同理 图块数据的小数组中四个元素是0x00 0x03 0x19和0x1C
Dialogue: 0,0:05:30.18,0:05:32.58,底部英文,,0,0,0,,In order to find a certain level in this list,
Dialogue: 0,0:05:30.18,0:05:32.58,底部中文,,0,0,0,,为了得到大数组中指向某个关卡的指针
Dialogue: 0,0:05:32.58,0:05:38.22,底部英文,,0,0,0,,we take its level number and add it to the index that corresponds to the level's type.
Dialogue: 0,0:05:32.58,0:05:38.22,底部中文,,0,0,0,,我们需要取得关卡在组内的编号 把它和对应关卡类型的索引相加（再去索引大数组）
Dialogue: 0,0:05:39.36,0:05:46.98,底部英文,,0,0,0,,For example, level 6-2 has ID $23, which corresponds to overworld level number 3.
Dialogue: 0,0:05:39.36,0:05:46.98,底部中文,,0,0,0,,比如说 关卡6-2的ID是0x23 对应主世界组中的3号关卡
Dialogue: 0,0:05:48.18,0:05:55.14,底部英文,,0,0,0,,For the tile data, overworld levels start at index 3, so we add that to 3 to get 6,
Dialogue: 0,0:05:48.18,0:05:55.14,底部中文,,0,0,0,,对于图块数据指针而言 主世界关卡从索引3开始 计算3加3得到6
Dialogue: 0,0:05:55.14,0:05:58.50,底部英文,,0,0,0,,so the tile data is the 7th entry in this list.
Dialogue: 0,0:05:55.14,0:05:58.50,底部中文,,0,0,0,,因此这一关的图块数据指针对应图块指针数组中的第7个元素
Dialogue: 0,0:05:59.60,0:06:03.62,底部英文,,0,0,0,,And for the sprite data, overworld levels start at index 6,
Dialogue: 0,0:05:59.60,0:06:03.62,底部中文,,0,0,0,,对于精灵数据指针 主世界关卡从索引6开始
Dialogue: 0,0:06:03.84,0:06:09.42,底部英文,,0,0,0,,so we add that to 3 to get 9, and the sprite data is the 10th entry in this list.
Dialogue: 0,0:06:03.84,0:06:09.42,底部中文,,0,0,0,,我们将6加上3得到9 所以精灵数据指针是对应大数组中的第10个元素
Dialogue: 0,0:06:10.86,0:06:16.86,底部英文,,0,0,0,,So now we can see what would happen if we were to try to load, say, the level with ID $43.
Dialogue: 0,0:06:10.86,0:06:16.86,底部中文,,0,0,0,,接下来我们尝试加载ID为0x43的关卡 看看会发生什么
Dialogue: 0,0:06:17.76,0:06:20.80,底部英文,,0,0,0,,This corresponds to underground level number 3,
Dialogue: 0,0:06:17.76,0:06:20.80,底部中文,,0,0,0,,它对应编号为3的地下关卡
Dialogue: 0,0:06:21.04,0:06:23.98,底部英文,,0,0,0,,and of course, there is no underground level number 3.
Dialogue: 0,0:06:21.04,0:06:23.98,底部中文,,0,0,0,,然而 地下关卡中并没有编号为3的关卡
Dialogue: 0,0:06:24.15,0:06:26.40,底部英文,,0,0,0,,But the calculation is still performed.
Dialogue: 0,0:06:24.15,0:06:26.40,底部中文,,0,0,0,,但上述计算照做不误
Dialogue: 0,0:06:27.24,0:06:33.66,底部英文,,0,0,0,,For tile data, underground levels start at index 25, so we add 3 to that to get 28,
Dialogue: 0,0:06:27.24,0:06:33.66,底部中文,,0,0,0,,地下关卡的图块数据指针从索引25开始 我们将关卡编号3加上去得到索引28
Dialogue: 0,0:06:33.66,0:06:39.24,底部英文,,0,0,0,,and we find the 29th entry in the list is the tile data for level 1-4.
Dialogue: 0,0:06:33.66,0:06:39.24,底部中文,,0,0,0,,我们在图块指针数组中找到第29个元素 它指向关卡1-4的图块数据
Dialogue: 0,0:06:40.02,0:06:46.26,底部英文,,0,0,0,,And for sprite data, underground levels start at index 28, so we add 3 to that to get 31,
Dialogue: 0,0:06:40.02,0:06:46.26,底部中文,,0,0,0,,地下关卡的精灵数据指针从索引28开始 给它加上3得到索引31
Dialogue: 0,0:06:46.26,0:06:52.38,底部英文,,0,0,0,,and we find the 32th entry in the list is the sprite data for water sublevel found in level 5-2.
Dialogue: 0,0:06:46.26,0:06:52.38,底部中文,,0,0,0,,我们找到精灵指针数组的第32个元素 它是指向水下关卡5-2的精灵数据的指针
Dialogue: 0,0:06:53.28,0:06:58.30,底部英文,,0,0,0,,This means, we will end up with a Frankenstein level that is level 1-4
Dialogue: 0,0:06:53.28,0:06:58.30,底部中文,,0,0,0,,这导致我们得到了一个怪异的关卡 它基于关卡1-4的地图
Dialogue: 0,0:06:58.44,0:07:03.84,底部英文,,0,0,0,,but with an underground theme with the Bloopers and platforms from that water sublevel all mixed together.
Dialogue: 0,0:06:58.44,0:07:03.84,底部中文,,0,0,0,,虽然拥有地下风格的主题 但也融合了指定水下关卡的章鱼怪（Bloopers）和移动平台
Dialogue: 0,0:07:04.92,0:07:10.44,底部英文,,0,0,0,,Which is exactly what we get when we force the game to load in the level with ID $43.
Dialogue: 0,0:07:04.92,0:07:10.44,底部中文,,0,0,0,,这就是强制游戏去加载ID为0x43的关卡导致的结果
Dialogue: 0,0:07:04.92,0:07:10.44,顶部注释,,0,0,0,,注：综上所示，这种“混合关卡”的成因是未经检查的数组子区域越界访问
Dialogue: 0,0:07:14.36,0:07:21.18,底部英文,,0,0,0,,Since there are only 34 entries in these lists, if we ever end up with an index of 34 or higher,
Dialogue: 0,0:07:14.36,0:07:21.18,底部中文,,0,0,0,,由于每个指针数组都只有34个元素 如果使用大于等于34的索引去访问它
Dialogue: 0,0:07:21.18,0:07:24.66,底部英文,,0,0,0,,we start to read things that aren't pointers to level data.
Dialogue: 0,0:07:21.18,0:07:24.66,底部中文,,0,0,0,,就会读取到并不指向有效关卡数据的“野指针”
Dialogue: 0,0:07:25.26,0:07:29.16,底部英文,,0,0,0,,This is what causes glitch levels to appear, which we'll see happen in a bit.
Dialogue: 0,0:07:25.26,0:07:29.16,底部中文,,0,0,0,,这导致了异常关卡的产生 这种情况我们稍后再来讲解
Dialogue: 0,0:07:29.94,0:07:33.54,底部英文,,0,0,0,,But knowing all this, we can fill out the rest of the table we made
Dialogue: 0,0:07:29.94,0:07:33.54,底部中文,,0,0,0,,按照这个原则 我们来补齐表格中空缺的位置
Dialogue: 0,0:07:33.54,0:07:37.98,底部英文,,0,0,0,,to see what levels will get loaded for the level IDs that aren't assigned to anything.
Dialogue: 0,0:07:33.54,0:07:37.98,底部中文,,0,0,0,,继续研究在使用未分配的关卡ID时载入关卡的形态
Dialogue: 0,0:07:39.00,0:07:43.31,底部英文,,0,0,0,,Since the level data is stored in a different order for sprites versus tile data,
Dialogue: 0,0:07:39.00,0:07:43.31,底部中文,,0,0,0,,对于精灵数据和图块数据来说 关卡数据的存储顺序并不相同
Dialogue: 0,0:07:43.31,0:07:47.94,底部英文,,0,0,0,,levels with these unused IDs are either a mix of two different levels,
Dialogue: 0,0:07:43.31,0:07:47.94,底部中文,,0,0,0,,那些无用ID所对应的关卡 可能是两个不同的正常关卡的混合
Dialogue: 0,0:07:47.94,0:07:50.82,底部英文,,0,0,0,,a normal level layout with glitched sprites,
Dialogue: 0,0:07:47.94,0:07:50.82,底部中文,,0,0,0,,也可能是正常关卡布局和不正常精灵数据的组合
Dialogue: 0,0:07:50.82,0:07:56.58,底部英文,,0,0,0,,a glitched level layout with normal sprites, or both glitched tile data and sprite data.
Dialogue: 0,0:07:50.82,0:07:56.58,底部中文,,0,0,0,,又或者是异常的关卡布局搭配正常的精灵 也有可能图块和精灵数据都是异常的
Dialogue: 0,0:07:57.42,0:08:01.44,底部英文,,0,0,0,,But how does the game even try to load a glitched level ID in the first place?
Dialogue: 0,0:07:57.42,0:08:01.44,底部中文,,0,0,0,,但是 游戏最开始是怎样得到一个异常的关卡ID并尝试载入它的呢？
Dialogue: 0,0:08:03.06,0:08:07.62,底部英文,,0,0,0,,In order for the game to know what levels are in which worlds, and what order they go in,
Dialogue: 0,0:08:03.06,0:08:07.62,底部中文,,0,0,0,,为了得知每个世界有哪些关卡 以及这些关卡进入的顺序
Dialogue: 0,0:08:07.62,0:08:12.78,底部英文,,0,0,0,,there is a single table that holds the ID of each level in the order they are played.
Dialogue: 0,0:08:07.62,0:08:12.78,底部中文,,0,0,0,,游戏中有一个存储着全部关卡ID的数组 其中的关卡按游玩顺序存放
Dialogue: 0,0:08:07.62,0:08:12.78,顶部注释,,0,0,0,,注：为了方便表达，下面称它为“关卡ID数组”
Dialogue: 0,0:08:13.44,0:08:21.24,底部英文,,0,0,0,,So for example, starting with world 1: level 1-1 is an overworld level so it has type bits 01.
Dialogue: 0,0:08:13.44,0:08:21.24,底部中文,,0,0,0,,举例来说 从1号世界开始 关卡1-1是一个主世界关卡 它的类型位是0b01
Dialogue: 0,0:08:21.24,0:08:27.42,底部英文,,0,0,0,,It has the level number of 5, so this is what its ID looks like, which is $25 in hexadecimal.
Dialogue: 0,0:08:21.24,0:08:27.42,底部中文,,0,0,0,,同时它的组内关卡编号是5 所以它的关卡ID是十六进制的0x25
Dialogue: 0,0:08:27.96,0:08:30.31,底部英文,,0,0,0,,This is the first byte in the table.
Dialogue: 0,0:08:27.96,0:08:30.31,底部中文,,0,0,0,,这就是关卡ID数组的第一个字节
Dialogue: 0,0:08:30.84,0:08:34.80,底部英文,,0,0,0,,Here is the rest of the table, which coresponds to each of the other levels.
Dialogue: 0,0:08:30.84,0:08:34.80,底部中文,,0,0,0,,这些是数组的其它元素 对应游戏的其它关卡的ID
Dialogue: 0,0:08:35.64,0:08:40.62,底部英文,,0,0,0,,If I split them up per world, you can see that some worlds actually have 5 levels.
Dialogue: 0,0:08:35.64,0:08:40.62,底部中文,,0,0,0,,如果将这个数组按世界划分 可以发现事实上某些世界有5个关卡
Dialogue: 0,0:08:41.46,0:08:47.48,底部英文,,0,0,0,,This is because the cutscene room that plays before the underground and water levels is actually considered its own level.
Dialogue: 0,0:08:41.46,0:08:47.48,底部中文,,0,0,0,,这是因为在进入地下或水下关卡前 过场区域被当作独立的关卡
Dialogue: 0,0:08:47.86,0:08:52.38,底部英文,,0,0,0,,Which was probably done so that if you die in one of these levels, you don't have to watch the cutscene again.
Dialogue: 0,0:08:47.86,0:08:52.38,底部中文,,0,0,0,,这样设计的原因可能是防止玩家在某一关失败以后 过场动画被重复播放
Dialogue: 0,0:08:47.86,0:08:52.38,顶部注释,,0,0,0,,注：把过场动画制作在关卡头部，就会出现游戏失败后重复播放的情况
Dialogue: 0,0:08:53.52,0:08:56.48,底部英文,,0,0,0,,Since each world can have a different number of levels in it,
Dialogue: 0,0:08:53.52,0:08:56.48,底部中文,,0,0,0,,由于每个世界包含的关卡数量可能不一样
Dialogue: 0,0:08:56.62,0:09:01.56,底部英文,,0,0,0,,it would be nice to have some pointers into this table that tell where each of the worlds start.
Dialogue: 0,0:08:56.62,0:09:01.56,底部中文,,0,0,0,,一个好的设计是使用另一组数据指向这个数组中的位置 告知每个世界从哪里开始
Dialogue: 0,0:09:02.34,0:09:06.30,底部英文,,0,0,0,,Just like another table of contents like before with the level data pointers.
Dialogue: 0,0:09:02.34,0:09:06.30,底部中文,,0,0,0,,和之前关卡数据指针的“目录”类似 这也是一个“目录”
Dialogue: 0,0:09:06.90,0:09:10.56,底部英文,,0,0,0,,Here, there are 8 bytes in ROM directly before this table,
Dialogue: 0,0:09:06.90,0:09:10.56,底部中文,,0,0,0,,在ROM中关卡ID数组的前面 紧挨着存放有一个8字节的小数组
Dialogue: 0,0:09:10.66,0:09:13.90,底部英文,,0,0,0,,which are the indices of the first levels of each world.
Dialogue: 0,0:09:10.66,0:09:13.90,底部中文,,0,0,0,,里面正是每个世界第一关在关卡ID数组中的索引
Dialogue: 0,0:09:14.22,0:09:19.49,底部英文,,0,0,0,,So world 1 has index 0, world 2 has index 5, and so on.
Dialogue: 0,0:09:14.22,0:09:19.49,底部中文,,0,0,0,,1号世界的索引是0 而2号世界的索引是5 以此类推
Dialogue: 0,0:09:19.49,0:09:26.94,底部英文,,0,0,0,,So let's do a small example to try to get the pointers to the level data for the first level in world 3.
Dialogue: 0,0:09:19.49,0:09:26.94,底部中文,,0,0,0,,下面通过一个简单的示例 来说明如何取得3号世界的第一关的关卡数据指针
Dialogue: 0,0:09:27.78,0:09:35.76,底部英文,,0,0,0,,World 3 would correspond an index of 2 into this first table, or the 3rd entry, which is 10 ($0A).
Dialogue: 0,0:09:27.78,0:09:35.76,底部中文,,0,0,0,,3号世界对应头一个小数组的2号索引 即第三个元素 从中得到数据10或0x0A
Dialogue: 0,0:09:37.02,0:09:41.94,底部英文,,0,0,0,,So we use this index 10 to find the 11th entry into the level ID table,
Dialogue: 0,0:09:37.02,0:09:41.94,底部中文,,0,0,0,,使用10作为索引 找到关卡ID数组中第11个元素
Dialogue: 0,0:09:41.94,0:09:44.22,底部英文,,0,0,0,,which looks like it is $24.
Dialogue: 0,0:09:41.94,0:09:44.22,底部中文,,0,0,0,,这里是0x24
Dialogue: 0,0:09:45.10,0:09:46.50,底部英文,,0,0,0,,According to our big table,
Dialogue: 0,0:09:45.10,0:09:46.50,底部中文,,0,0,0,,依照我们先前整理的大表格
Dialogue: 0,0:09:46.50,0:09:52.92,底部英文,,0,0,0,,the level with ID $24 is level 3-1, but let's see how the level data pointers are created.
Dialogue: 0,0:09:46.50,0:09:52.92,底部中文,,0,0,0,,0x24这个关卡ID对应关卡3-1 先不管这个 来看看如何使用它构建出关卡数据指针
Dialogue: 0,0:09:54.00,0:09:59.82,底部英文,,0,0,0,,Expand that ID out into binary and we can see that this level uses 01 as its type,
Dialogue: 0,0:09:54.00,0:09:59.82,底部中文,,0,0,0,,我们将这个关卡ID展开为二进制 可以得到它的关卡类型是0b01
Dialogue: 0,0:09:59.82,0:10:03.06,底部英文,,0,0,0,,so it is an overworld level.And it's number 4.
Dialogue: 0,0:09:59.82,0:10:03.06,底部中文,,0,0,0,,这说明它是个主世界关卡 同时组内的关卡编号为4
Dialogue: 0,0:10:04.08,0:10:05.94,底部英文,,0,0,0,,First let's find the sprite data.
Dialogue: 0,0:10:04.08,0:10:05.94,底部中文,,0,0,0,,先来处理精灵数据指针
Dialogue: 0,0:10:06.21,0:10:12.72,底部英文,,0,0,0,,The 2 bits for the level type are actually used as the index into the smaller table we made for the level data type groups.
Dialogue: 0,0:10:06.21,0:10:12.72,底部中文,,0,0,0,,编码关卡类型的两个比特被用来索引小数组 我们拿它来找到对应关卡类型的一组关卡数据指针
Dialogue: 0,0:10:13.26,0:10:19.20,底部英文,,0,0,0,,Our bits are 01, so we use index 1, or the 2nd entry in this table, which is 6.
Dialogue: 0,0:10:13.26,0:10:19.20,底部中文,,0,0,0,,关卡类型是0b01 对应的索引是1 读出小数组的第二个元素 即6
Dialogue: 0,0:10:20.04,0:10:24.24,底部英文,,0,0,0,,Then we add that with the level number we got, so 6 plus 4 is 10.
Dialogue: 0,0:10:20.04,0:10:24.24,底部中文,,0,0,0,,我们把6和组内关卡编号4相加 得到10
Dialogue: 0,0:10:24.96,0:10:28.80,底部英文,,0,0,0,,So we use this index 10 to find the 11th entry in the level table,
Dialogue: 0,0:10:24.96,0:10:28.80,底部中文,,0,0,0,,再根据索引10 读取精灵数据指针数组的第11个元素
Dialogue: 0,0:10:28.80,0:10:34.08,底部英文,,0,0,0,,which is the address $9ED0, which is what we would expect for level 3-1!
Dialogue: 0,0:10:28.80,0:10:34.08,底部中文,,0,0,0,,最终得到了指针0x9ED0 它指向我们所预期的关卡3-1的精灵数据
Dialogue: 0,0:10:35.40,0:10:37.28,底部英文,,0,0,0,,We can do the same for the tile data.
Dialogue: 0,0:10:35.40,0:10:37.28,底部中文,,0,0,0,,图块数据指针的计算也是同样的原理
Dialogue: 0,0:10:37.68,0:10:42.18,底部英文,,0,0,0,,We use type index 1 again to get the 2nd entry in this table, which is 3.
Dialogue: 0,0:10:37.68,0:10:42.18,底部中文,,0,0,0,,再次根据关卡类型编码1 读取这个小数组的第2个元素 得到3
Dialogue: 0,0:10:42.97,0:10:48.94,底部英文,,0,0,0,,Add the level number 4 to 3 to get 7, and use index 7 to get the 8th level in the table,
Dialogue: 0,0:10:42.97,0:10:48.94,底部中文,,0,0,0,,将组内关卡编号4和3相加得到7 使用索引7读取图块数据指针数组的第8个元素
Dialogue: 0,0:10:49.16,0:10:53.46,底部英文,,0,0,0,,which is $A619, the pointer to level 3-1 again!
Dialogue: 0,0:10:49.16,0:10:53.46,底部中文,,0,0,0,,获得到的指针为0xA619 它正是关卡3-1的图块数据指针
Dialogue: 0,0:10:54.54,0:10:59.54,底部英文,,0,0,0,,The way you can tell something weird is going to happen when you try to load something like world 9
Dialogue: 0,0:10:54.54,0:10:59.54,底部中文,,0,0,0,,然而 试图加载9号世界的时候 事情开始变得不对劲起来
Dialogue: 0,0:10:59.66,0:11:03.12,底部英文,,0,0,0,,is by looking at the very first table of indices we made at the start.
Dialogue: 0,0:10:59.66,0:11:03.12,底部中文,,0,0,0,,问题从访问连续内存中的第一个数组 即关卡ID数组的索引数组时就产生了
Dialogue: 0,0:11:03.12,0:11:07.86,底部英文,,0,0,0,,We only accounted for 8 worlds, so this table is only 8 bytes long.
Dialogue: 0,0:11:03.12,0:11:07.86,底部中文,,0,0,0,,游戏只有8个世界 因此这个索引小数组的长度是8个字节
Dialogue: 0,0:11:08.40,0:11:12.36,底部英文,,0,0,0,,If we tried to find the 9th entry in this table, we'd overflow the table.
Dialogue: 0,0:11:08.40,0:11:12.36,底部中文,,0,0,0,,当试图寻找数组的第9个元素时 发生了向上越界
Dialogue: 0,0:11:13.44,0:11:18.54,底部英文,,0,0,0,,Before going all in with world 9, let's see what happens when we try to load world G.
Dialogue: 0,0:11:13.44,0:11:18.54,底部中文,,0,0,0,,暂且不谈9号世界的情况 先来看试图加载世界G时会发生什么
Dialogue: 0,0:11:19.20,0:11:22.38,底部英文,,0,0,0,,World G is equivalent to world 16.
Dialogue: 0,0:11:19.20,0:11:22.38,底部中文,,0,0,0,,世界G也就是十进制的第16个世界
Dialogue: 0,0:11:22.72,0:11:28.54,底部英文,,0,0,0,,If we try to find the 16th entry in this table, we go past the bounds of the table by 8 bytes.
Dialogue: 0,0:11:22.72,0:11:28.54,底部中文,,0,0,0,,当尝试读取数组的第16个元素时 越过了数组边界8个字节
Dialogue: 0,0:11:28.90,0:11:35.40,底部英文,,0,0,0,,Remember, these two tables are right next to each other in the ROM, so we just keep crusing to find the index we need.
Dialogue: 0,0:11:28.90,0:11:35.40,底部中文,,0,0,0,,值得注意的是 图中的两个数组在ROM中是紧邻的 跟随光标找到所需的索引
Dialogue: 0,0:11:36.24,0:11:41.50,底部英文,,0,0,0,,Index 15 of the first table overflows into the second table by 8 bytes,
Dialogue: 0,0:11:36.24,0:11:41.50,底部中文,,0,0,0,,第一个数组下标为15的元素越界进入了第二个数组 是第二个数组的第8个字节
Dialogue: 0,0:11:41.81,0:11:46.47,底部英文,,0,0,0,,so we get this $01 that normally corresponds to level 2-2.
Dialogue: 0,0:11:41.81,0:11:46.47,底部中文,,0,0,0,,读取到了0x01这个值 它原本是关卡2-2的关卡ID
Dialogue: 0,0:11:46.90,0:11:53.16,底部英文,,0,0,0,,However, in this context, it is instead being treated as an index in to the very table that it is part of.
Dialogue: 0,0:11:46.90,0:11:53.16,底部中文,,0,0,0,,然而 在当前上下文中 它被当成了自身所在的这个数组的索引
Dialogue: 0,0:11:54.00,0:11:59.88,底部英文,,0,0,0,,So now we use index 1 to find the 2nd entry in this table, which is this $29.
Dialogue: 0,0:11:54.00,0:11:59.88,底部中文,,0,0,0,,我们使用索引1 读取了这个数组的第2个元素 即0x29
Dialogue: 0,0:12:00.54,0:12:03.54,底部英文,,0,0,0,,This is the cutscene level that leads into level 1-2.
Dialogue: 0,0:12:00.54,0:12:03.54,底部中文,,0,0,0,,它对应连接关卡1-2的过场动画
Dialogue: 0,0:12:03.54,0:12:06.60,底部英文,,0,0,0,,And sure enough, if we try to play level G-1,
Dialogue: 0,0:12:03.54,0:12:06.60,底部中文,,0,0,0,,可以足够确定的是 如果尝试从关卡G-1开始游戏
Dialogue: 0,0:12:06.60,0:12:11.46,底部英文,,0,0,0,,we get the cutscene into level 1-2, though it is still called level G-1.
Dialogue: 0,0:12:06.60,0:12:11.46,底部中文,,0,0,0,,即使这一关会被称作关卡G-1 它会播放连接关卡1-2的过场动画
Dialogue: 0,0:12:13.44,0:12:16.74,底部英文,,0,0,0,,Now let's see what happens if we try to load in world 9.
Dialogue: 0,0:12:13.44,0:12:16.74,底部中文,,0,0,0,,现在 来看看在试图加载9号世界时会发生什么
Dialogue: 0,0:12:17.52,0:12:24.54,底部英文,,0,0,0,,So, the 9th entry into this table--we overflow by one byte, so our index is this $25.
Dialogue: 0,0:12:17.52,0:12:24.54,底部中文,,0,0,0,,这个数组的第9个元素溢出了1个字节 读取到的索引将会是0x25
Dialogue: 0,0:12:24.54,0:12:31.92,底部英文,,0,0,0,,We use this index $25 (or decimal 37) to find the 38th entry into this table of level IDs.
Dialogue: 0,0:12:24.54,0:12:31.92,底部中文,,0,0,0,,接下来使用索引25即十进制的37 来获取关卡ID数组的第38个元素
Dialogue: 0,0:12:32.88,0:12:38.58,底部英文,,0,0,0,,This table is only 36 bytes long! So we overflow this table as well--by two bytes.
Dialogue: 0,0:12:32.88,0:12:38.58,底部中文,,0,0,0,,由于这个数组只有36个字节 这次访问会溢出该数组2个字节的长度
Dialogue: 0,0:12:39.42,0:12:44.10,底部英文,,0,0,0,,The next thing in ROM is this small table for the offsets for the enemy data table.
Dialogue: 0,0:12:39.42,0:12:44.10,底部中文,,0,0,0,,ROM中后续的内容 是存储精灵数据指针数组的索引的那个小数组
Dialogue: 0,0:12:44.70,0:12:49.38,底部英文,,0,0,0,,The 2nd entry here is 6, so that is the level ID we are going to load.
Dialogue: 0,0:12:44.70,0:12:49.38,底部中文,,0,0,0,,其中第2个元素是6 接下来会把它当作需要装载关卡的ID
Dialogue: 0,0:12:49.92,0:12:52.35,底部英文,,0,0,0,,If we take a quick look at our big table again,
Dialogue: 0,0:12:49.92,0:12:52.35,底部中文,,0,0,0,,此时我们再次查询之前做的那个所有关卡ID的大表格
Dialogue: 0,0:12:52.35,0:12:59.22,底部英文,,0,0,0,,we can see that we will end up with the water version of level 6-2, but again, let's see why exactly that is.
Dialogue: 0,0:12:52.35,0:12:59.22,底部中文,,0,0,0,,可以看到这个关卡ID对应于一个关卡6-2的水下版本 下面来研究为什么会是这样吧
Dialogue: 0,0:12:59.22,0:13:05.82,底部英文,,0,0,0,,Now we expand this ID into binary.The type bits are 00, so this is a water level.
Dialogue: 0,0:12:59.22,0:13:05.82,底部中文,,0,0,0,,将关卡ID展开成二进制 关卡类型位是0b00 所以这是一个水下关卡
Dialogue: 0,0:13:05.82,0:13:11.31,底部英文,,0,0,0,,And the level number is 6.This means we are going to load in water level number 6,
Dialogue: 0,0:13:05.82,0:13:11.31,底部中文,,0,0,0,,组内关卡编号是6 意味着将装载水下关卡的第6关
Dialogue: 0,0:13:11.82,0:13:15.02,底部英文,,0,0,0,,which is interesting because there are only 3 water levels.
Dialogue: 0,0:13:11.82,0:13:15.02,底部中文,,0,0,0,,然而水下关卡只有3关 这就很有趣了
Dialogue: 0,0:13:15.86,0:13:22.98,底部英文,,0,0,0,,According to this table we made, the tile data for water level number 6 is the same tile data as the original 6-2!
Dialogue: 0,0:13:15.86,0:13:22.98,底部中文,,0,0,0,,根据此前做的这张表格 水下关卡第6关的图块数据和关卡6-2的一样
Dialogue: 0,0:13:23.70,0:13:26.82,底部英文,,0,0,0,,And the sprite data is loaded from some glitched pointer.
Dialogue: 0,0:13:23.70,0:13:26.82,底部中文,,0,0,0,,而精灵数据是某个“野指针”指向的内容
Dialogue: 0,0:13:27.54,0:13:34.52,底部英文,,0,0,0,,This is because if the take the level number 6 and add it to the offset for water levels in the sprite data pointer list,
Dialogue: 0,0:13:27.54,0:13:34.52,底部中文,,0,0,0,,这是由于将组内关卡编号6和水下关卡的精灵数据指针数组索引（0x1F）相加
Dialogue: 0,0:13:34.64,0:13:38.58,底部英文,,0,0,0,,we get an index of 37, which is greater than 33.
Dialogue: 0,0:13:34.64,0:13:38.58,底部中文,,0,0,0,,得到的索引是37 它大于33
Dialogue: 0,0:13:39.24,0:13:44.58,底部英文,,0,0,0,,The glitched pointer we get from this invalid index is actually $1C9D,
Dialogue: 0,0:13:39.24,0:13:44.58,底部中文,,0,0,0,,使用这个异常索引获得的指针是0x1C9D
Dialogue: 0,0:13:44.58,0:13:48.03,底部英文,,0,0,0,,which corresponds to system RAM rather than ROM.
Dialogue: 0,0:13:44.58,0:13:48.03,底部中文,,0,0,0,,指向的空间是系统内存而非游戏ROM
Dialogue: 0,0:13:48.78,0:13:53.26,底部英文,,0,0,0,,This is why glitched levels can be very volatile and possibly crash the game,
Dialogue: 0,0:13:48.78,0:13:53.26,底部中文,,0,0,0,,这解释了此类异常关卡十分脆弱且容易使游戏崩溃的现象
Dialogue: 0,0:13:53.49,0:13:57.66,底部英文,,0,0,0,,not only because it's possible to load in enemies with invalid IDs,
Dialogue: 0,0:13:53.49,0:13:57.66,底部中文,,0,0,0,,不仅容易载入具有无效标识符的敌人
Dialogue: 0,0:13:57.66,0:14:02.04,底部英文,,0,0,0,,but also because the level data can be changing while the game is playing!
Dialogue: 0,0:13:57.66,0:14:02.04,底部中文,,0,0,0,,而且关卡数据还会随着游玩发生变化
Dialogue: 0,0:14:03.00,0:14:08.88,底部英文,,0,0,0,,If you play around in level 9-1 a lot, you can start to notice that the game will crash somewhat frequently,
Dialogue: 0,0:14:03.00,0:14:08.88,底部中文,,0,0,0,,多玩几次关卡9-1就会发现 在这里游戏经常死机
Dialogue: 0,0:14:09.28,0:14:11.04,底部英文,,0,0,0,,and in a different spot every time.
Dialogue: 0,0:14:09.28,0:14:11.04,底部中文,,0,0,0,,并且每次死机的地点也不太一样
Dialogue: 0,0:14:13.44,0:14:15.84,底部英文,,0,0,0,,So if you can load errant enemy data,
Dialogue: 0,0:14:13.44,0:14:15.84,底部中文,,0,0,0,,既然能够载入有问题的精灵数据
Dialogue: 0,0:14:15.84,0:14:20.16,底部英文,,0,0,0,,can you load errant level tile data and get some fun glitch levels to explore?
Dialogue: 0,0:14:15.84,0:14:20.16,底部中文,,0,0,0,,那么载入有问题的关卡图块数据 得到的异常关卡又有哪些有趣的特性呢？
Dialogue: 0,0:14:20.70,0:14:26.10,底部英文,,0,0,0,,We'll save that for the final video of this 3-part mini-series on Super Mario Bros. glitched levels.
Dialogue: 0,0:14:20.70,0:14:26.10,底部中文,,0,0,0,,我们将它留到这个三集的《超级马里奥兄弟》“水下256关”迷你系列的最后一集来回答
Dialogue: 0,0:14:26.10,0:14:31.99,底部英文,,0,0,0,,In the next video, we'll look at those glitch levels you can get to, as well as the level format in general.
Dialogue: 0,0:14:26.10,0:14:31.99,底部中文,,0,0,0,,下期视频我们将继续探寻那些异常关卡 并系统介绍游戏关卡数据的格式
Dialogue: 0,0:14:31.99,0:14:33.24,底部英文,,0,0,0,,Thank you for watching!
Dialogue: 0,0:14:31.99,0:14:33.24,底部中文,,0,0,0,,感谢您的观看！
Dialogue: 0,0:14:31.99,0:14:33.24,顶部注释,,0,0,0,,【译者：某科学的小姚同志；内容仅供技术交流，侵删，赞助和支持视频作者的方式在评论区中】
Dialogue: 0,0:14:33.48,0:14:36.14,底部中文,,0,0,0,,【正片结束，没有彩蛋 (≥﹏ ≤)】【如有错误请多多指点！翻译不易，求三连支持Orz】
